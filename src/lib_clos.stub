;; -*- mode:scheme; coding: utf-8; -*-
(library (sagittarius clos)
    (export slot-ref slot-set!
	    slot-ref-using-accessor
	    slot-set-using-accessor!
	    class-of
	    is-a?
	    eql
	    %make-next-method
	    %make-slot-accessor
	    )
    (import :none)

  (decl-code
   (.define "LIBSAGITTARIUS_BODY")
   (.include <sagittarius/private.h> <sagittarius/private/generic.h>))

  (define-c-proc %add-direct-subclass! (super::<class> sub::<class>) ::<void>
    Sg_AddDirectSubclass)
  (define-c-proc %remove-direct-subclass! (super::<class> sub::<class>) ::<void>
    Sg_RemoveDirectSubclass)

  (define-c-proc slot-ref (o name::<symbol>) :no-side-effect
    (setter slot-set!)
    Sg_VMSlotRef)

  (define-c-proc slot-set! (o name::<symbol> v) Sg_VMSlotSet)

  (define-c-proc slot-ref-using-accessor (o sa::<slot-accessor>) :no-side-effect
    Sg_SlotRefUsingAccessor)
  (define-c-proc slot-set-using-accessor! (o sa::<slot-accessor> v) ::<void>
    Sg_SlotSetUsingAccessor)
  (define-c-proc slot-bound-using-accessor? (o sa::<slot-accessor>)
    ::<boolean> :no-side-effect
    Sg_SlotBoundUsingAccessor)

  (define-c-proc slot-ref-using-class (cl o slot::<symbol>) :no-side-effect
    (unless (Sg_TypeP cl SG_CLASS_CLASS)
      (Sg_WrongTypeOfArgumentViolation 'slot-ref-using-class
				       (SG_MAKE_STRING "sub type of <class>")
				       cl (SG_LIST3 cl o slot)))
    (result (Sg_SlotRefUsingClass cl o slot)))

  (define-c-proc slot-set-using-class! (cl o slot::<symbol> v) ::<void>
    (unless (Sg_TypeP cl SG_CLASS_CLASS)
      (Sg_WrongTypeOfArgumentViolation 'slot-set-using-class!
				       (SG_MAKE_STRING "sub type of <class>")
				       cl (SG_LIST4 cl o slot v)))
    (Sg_SlotSetUsingClass cl o slot v))

  (define-c-proc slot-bound-using-class? (cl o slot::<symbol>) 
    ::<boolean> :no-side-effect
    (unless (Sg_TypeP cl SG_CLASS_CLASS)
      (Sg_WrongTypeOfArgumentViolation 'slot-bound-using-class?
				       (SG_MAKE_STRING "sub type of <class>")
				       cl (SG_LIST3 cl o slot)))
    (result (Sg_SlotBoundUsingClass cl o slot)))

  (define-c-proc slot-bound? (o name::<symbol>) :no-side-effect Sg_VMSlotBoundP)

  (define-c-proc class-of (o) :no-side-effect Sg_VMClassOf)
  ;; for mop, to retrieve class before redefined
  (define-c-proc current-class-of (o) :no-side-effect Sg_ClassOf)

  (define-c-proc is-a? (o klass::<class>) :no-side-effect Sg_VMIsA)
  (define-c-proc subtype? (c1::<class> c2::<class>)
    ::<boolean> :no-side-effect
    Sg_SubtypeP)

  (define-cfn call-fallback-proc (args::SgObject* nargs::int gf::SgGeneric*)
    :static
    (return (Sg_VMApply (SG_OBJ (-> gf data)) (Sg_ArrayToList args nargs))))

  (define-c-proc %ensure-generic-function (name::<symbol> lib::<library>)
    (let ((g::SgGloc* (Sg_FindBinding lib name #f))
	  (val #f))
      (when (SG_GLOCP g) (set! val (SG_GLOC_GET g)))
      (when (not (Sg_TypeP val SG_CLASS_GENERIC))
	(if (or (SG_SUBRP val) (SG_CLOSUREP val))
	    (set! val (Sg_MakeBaseGeneric (SG_OBJ name) call-fallback-proc val))
	    (set! val (Sg_MakeBaseGeneric (SG_OBJ name) NULL NULL)))
	(Sg_InsertBinding lib name val))
      (result val)))

  (define-c-proc %make-next-method (gf methods::<list> args::<list>)
    (let ((argv::SgObject*) (argc::int))
      (unless (Sg_TypeP gf SG_CLASS_GENERIC)
	(Sg_WrongTypeOfArgumentViolation
	 '%make-next-method
	 'generic gf (SG_LIST3 gf methods args)))
      (dolist (mp methods)
	(unless (Sg_TypeP mp SG_CLASS_METHOD)
	  (Sg_WrongTypeOfArgumentViolation '%make-next-method
					   'method mp
					   (SG_LIST3 gf methods args))))
      (set! argc (cast int (Sg_Length args)))
      (set! argv (Sg_ListToArray args FALSE))
      (let ((i::int))
	(for ((set! i 0) (== i argc) (set! i (+ i 1)))
	     (Sg_Printf (Sg_StandardErrorPort) (UC "args[%d] = %s\n") i (aref argv i))))
      (result (Sg_MakeNextMethod (SG_GENERIC gf) methods argv argc
				 FALSE))))

  (define-c-proc eq    (o) Sg_MakeEqSpecializer)
  (define-c-proc eql   (o) Sg_MakeEqlSpecializer)
  (define-c-proc equal (o) Sg_MakeEqualSpecializer)

  (define-c-proc eql-specializer? (o) ::<boolean> :constant
    SG_EQL_SPECIALIZERP)
  (define-type <eql-specializer> "SgEqlSpecializer *" "eql specializer"
    "SG_EQL_SPECIALIZERP" "SG_EQL_SPECIALIZER")
  (define-c-proc eql-specializer-compare (e::<eql-specializer> o) ::<boolean>
    :no-side-effect
    Sg_CompareEqlSpecializer)
  
  (define-c-proc %compute-applicable-methods (gf args::<list>)
    Sg_ComputeApplicableMethods)

  (define-c-proc %sort-method-by-qualifier (methods::<list>)
    Sg_VMSortMethodByQualifier)

  (define-c-proc %compute-around-methods
    (around::<list> before::<list> primary::<list> after::<list>)
    Sg_VMComputeAroundMethods)

  (define-c-proc %make-slot-accessor 
    (klass slot index::<fixnum> getter setter bound?)
    (unless (Sg_TypeP klass SG_CLASS_CLASS)
      (Sg_WrongTypeOfArgumentViolation (SG_INTERN "%make-slot-accessor")
				       (SG_INTERN "sub type of <class>")
				       klass (SG_LIST2 klass slot)))
    (unless (or (SG_FALSEP getter) (SG_PROCEDUREP getter))
      (Sg_WrongTypeOfArgumentViolation (SG_INTERN "%make-slot-accessor")
				       (SG_INTERN "procedure or #f")
				       klass (SG_LIST2 klass getter)))
    (unless (or (SG_FALSEP setter) (SG_PROCEDUREP setter))
      (Sg_WrongTypeOfArgumentViolation (SG_INTERN "%make-slot-accessor")
				       (SG_INTERN "procedure or #f")
				       klass (SG_LIST2 klass setter)))
    (unless (or (SG_FALSEP bound?) (SG_PROCEDUREP bound?))
      (Sg_WrongTypeOfArgumentViolation (SG_INTERN "%make-slot-accessor")
				       (SG_INTERN "procedure or #f")
				       klass (SG_LIST2 klass bound?)))
    (result (Sg_MakeSlotAccessor klass slot (cast int index)
				 getter setter bound?)))

  ;; for change-class
  (define-c-proc %swap-class-and-slots! (new-instance old-instance) ::<void>
    Sg_SwapClassAndSlots)
  (define-c-proc %start-class-redefinition! (klass::<class>) ::<void>
    Sg_StartClassRedefinition)
  (define-c-proc %end-class-redefinition! (klass::<class> newklass) ::<void>
    Sg_EndClassRedefinition)
  (define-c-proc %replace-class-binding! (oldc::<class> newc::<class>) ::<void>
    Sg_ReplaceClassBinding)

  (define-c-proc slot-initialize-using-accessor! 
    (o sa::<slot-accessor> initargs) Sg_VMSlotInitializeUsingAccessor)
  (define-c-proc slot-ref-using-slot-definition (o slot)
    Sg_VMSlotRefUsingSlotDefinition)
  (define-c-proc slot-set-using-slot-definition! (o slot value)
    Sg_VMSlotSetUsingSlotDefinition)
  (define-c-proc slot-bound-using-slot-definition? (o slot)
    Sg_VMSlotBoundUsingSlotDefinition)

  )
