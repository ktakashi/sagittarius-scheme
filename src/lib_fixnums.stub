;; flonum.stub                                -*- mode:scheme; coding:utf-8; -*-
;;
;;  Copyright (c) 2017-2021  Takashi Kato <ktakashi@ymail.com>
;;
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions
;;  are met:
;;
;;  1. Redistributions of source code must retain the above copyright
;;     notice, this list of conditions and the following disclaimer.
;;
;;  2. Redistributions in binary form must reproduce the above copyright
;;     notice, this list of conditions and the following disclaimer in the
;;     documentation and/or other materials provided with the distribution.
;;
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

;; provides R6RS and SRFI-143 flonum procedures
;; see: https://srfi.schemers.org/srfi-143/srfi-143.html
(library (sagittarius fixnums)
    (export :only-bindings)
    (import (core))

(decl-code
 (.define "LIBSAGITTARIUS_BODY")
 (.include <sagittarius/private.h>
	   <sagittarius/private/instruction.h>
	   <sagittarius/private/builtin-symbols.h>
	   "number.inc"))
    
(define-cise-stmt assertion-violation
    ((_ who msg)
     `(begin
	(Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) '())))
    ((_ who msg irritants)
     `(begin
	(Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) ,irritants)
	 )))

(define-cise-stmt wrong-type-of-argument-violation
  ((_ who msg got)
   `(begin
      (Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got '())))
  ((_ who msg got irritants)
   `(begin
      (Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got

				       ,irritants))))

(define-cise-stmt implementation-restriction-violation
  ((_ who msg)
   `(begin
      (Sg_ImplementationRestrictionViolation ,who (SG_MAKE_STRING ,msg) '())
      ))
  ((_ who msg irritants)
   `(begin
      (Sg_ImplementationRestrictionViolation ,who (SG_MAKE_STRING ,msg)
					     ,irritants))))

;;; on 32 and 64 return different value
;;; so fx related are not constant
(define-c-proc fixnum? (o) ::<boolean> :no-side-effect SG_INTP)
(define-c-proc fixnum-width () ::<fixnum> :no-side-effect
  (result (+ SG_INT_SIZE 1)))
(define-c-proc least-fixnum () ::<fixnum> :no-side-effect
  (result SG_INT_MIN))
(define-c-proc greatest-fixnum () ::<fixnum> :no-side-effect
  (result SG_INT_MAX))

(define-cise-stmt check-fixnum
  ((_ name value)
   `(unless (SG_INTP ,value)
      (wrong-type-of-argument-violation ',name "fixnum" ,value))))

(define-cise-stmt fixnum-compare
  ((_ name compare first second rest)
   `(begin
      (unless (,compare ,first ,second)
	(return #f))
      (let ((prev::long ,second)
	    (target::long 0))
	(dolist (v ,rest)
	  (check-fixnum ,name v)
	  (set! target (SG_INT_VALUE v))
	  (unless (,compare prev target)
	    (return #f))
	  (set! prev target))
	(result TRUE)))))

(define-c-proc fx=? (fx1::<fixnum> fx2::<fixnum> :rest rest) ::<boolean>
  :no-side-effect
  (fixnum-compare fx=? == fx1 fx2 rest))
(define-c-proc fx<? (fx1::<fixnum> fx2::<fixnum> :rest rest) ::<boolean>
  :no-side-effect
  (fixnum-compare fx<? < fx1 fx2 rest))
(define-c-proc fx>? (fx1::<fixnum> fx2::<fixnum> :rest rest) ::<boolean>
  :no-side-effect
  (fixnum-compare fx>? > fx1 fx2 rest))
(define-c-proc fx<=? (fx1::<fixnum> fx2::<fixnum> :rest rest) ::<boolean>
  :no-side-effect
  (fixnum-compare fx<=? <= fx1 fx2 rest))
(define-c-proc fx>=? (fx1::<fixnum> fx2::<fixnum> :rest rest) ::<boolean>
  :no-side-effect
  (fixnum-compare fx>=? >= fx1 fx2 rest))

;; even though 32 and 64 bits environment have different range
;; of fixnum, checking 0 or signness is not different (always compare
;; to the same value 0). so these can be constant
(define-c-proc fxzero? (fx::<fixnum>) ::<boolean> :constant
  (result (== fx 0)))
(define-c-proc fxpositive? (fx::<fixnum>) ::<boolean> :constant
  (result (> fx 0)))
(define-c-proc fxnegative? (fx::<fixnum>) ::<boolean> :constant
  (result (< fx 0)))

(define-c-proc fxodd? (fx::<fixnum>) ::<boolean> :constant
  (result (== (logand fx 1) 1)))
(define-c-proc fxeven? (fx::<fixnum>) ::<boolean> :constant
  (result (== (logand fx 1) 0)))

(define-c-proc fxmax (fx::<fixnum> :rest rest) ::<fixnum> :no-side-effect
  (let ((r::long fx))
    (dolist (v rest)
      (check-fixnum fxmac v)
      (if (> (SG_INT_VALUE v) r)
	  (set! r (SG_INT_VALUE v))))
    (result r)))

(define-c-proc fxmin (fx::<fixnum> :rest rest) ::<fixnum> :no-side-effect
  (let ((r::long fx))
    (dolist (v rest)
      (check-fixnum fxmac v)
      (if (< (SG_INT_VALUE v) r)
	  (set! r (SG_INT_VALUE v))))
    (result r)))

(define-cise-expr fixnum-fits?
  ((_ fx) `(and (<= SG_INT_MIN ,fx) (<= ,fx SG_INT_MAX))))
(define-cise-stmt result-fixnum
  ((_ ret who fx1 fx2)
   `(if (fixnum-fits? ,ret)
	(result (cast long ret))
	(implementation-restriction-violation ',who "result is not a fixnum"
	 (SG_LIST2 (SG_MAKE_INT fx1) (SG_MAKE_INT fx2))))))

(define-c-proc fx+ (fx1::<fixnum> fx2::<fixnum>) ::<fixnum> :no-side-effect
  (let ((ret::long (+ fx1 fx2)))
    (result-fixnum ret fx+ fx1 fx2)))

(define-c-proc fx* (fx1::<fixnum> fx2::<fixnum>) ::<fixnum> :no-side-effect
  (let ((ret::dlong (* fx1 fx2)))
    (result-fixnum ret fx* fx1 fx2)))

(define-c-proc fx- (fx1::<fixnum> :optional o) ::<fixnum> :no-side-effect
  (if (SG_UNBOUNDP o)
      (if (== fx1 SG_INT_MIN)
	  (implementation-restriction-violation
	   'fx-
	   "result is not a fixnum"
	   (SG_MAKE_INT fx1))
	  (result (- 0 fx1)))
      (begin
	(check-fixnum fx- o)
	(let ((fx2::long (SG_INT_VALUE o))
	      (ret::long (- fx1 fx2)))
	  (result-fixnum ret fx- fx1 fx2)))))

(define-cfn fixnum-div (x::long y::long) ::long :static
  (cond ((== x 0)(return 0))
	((> x 0) (return (/ x y)))
	((> y 0) (return (/ (+ (- x y) 1) y)))
	(else (return (/ (+ x y 1) y)))))

(define-cfn fixnum-mod (x::long y::long) ::long :static
  (let ((ret::long (fixnum-div x y)))
    (return (- x (* ret y)))))

(define-c-proc fxdiv (fx1::<fixnum> fx2::<fixnum>) ::<fixnum> :no-side-effect
  (when (== fx2 0)
    (assertion-violation 'fxdiv "dividing by zero"))
  (let ((ret::long (fixnum-div fx1 fx2)))
    (result-fixnum ret fxdiv fx1 fx2)))

(define-c-proc fxmod (fx1::<fixnum> fx2::<fixnum>) ::<fixnum> :no-side-effect
  (when (== fx2 0)
    (assertion-violation 'fxmod "dividing by zero"))
  (let ((ret::long (fixnum-mod fx1 fx2)))
    (result-fixnum ret fxmod fx1 fx2)))

(decl-code (.include <math.h>))
(define-cfn fixnum-div0 (x::long y::long) ::long :static
  (let* ((d::long (fixnum-div x y))
	 (m::double (- x (* d y))))
    (cond ((< m (fabs (/ (cast double y) 2))) (return d))
	  ((> y 0) (return (+ d 1)))
	  (else (return (- d 1))))))

(define-cfn fixnum-mod0 (x::long y::long) ::long :static
  (let ((ret::long (fixnum-div0 x y)))
    (return (- x (* y ret)))))

(define-c-proc fxdiv0 (fx1::<fixnum> fx2::<fixnum>) ::<fixnum> :no-side-effect
  (when (== fx2 0) (assertion-violation 'fxdiv0 "dividing by zero"))
  (let ((ret::long (fixnum-div0 fx1 fx2)))
    (result-fixnum ret fxdiv0 fx1 fx2)))

(define-c-proc fxmod0 (fx1::<fixnum> fx2::<fixnum>) ::<fixnum> :no-side-effect
  (when (== fx2 0) (assertion-violation 'fxmod0 "dividing by zero"))
  (let ((ret::long (fixnum-mod0 fx1 fx2)))
    (result-fixnum ret fxmod0 fx1 fx2)))

(define-cise-stmt fxlogop
  ((_ name ret op args)
   `(dolist (v ,args)
      (check-fixnum ,name v)
      (set! ,ret (SG_OBJ (,op (cast intptr_t ,ret) (cast intptr_t v)))))))

(define-cise-macro (fxlogif form env)
  (match form
    ((_ a b c)
     `("((" ,(render-rec a env) "&" ,(render-rec b env)
       ")|(~" ,(render-rec a env) "&" ,(render-rec c env) "))"))))

(define-c-proc fxand
  (:optional fx1::<integer> fx2::<integer> :rest rest) :no-side-effect
  (cond ((SG_UNBOUNDP fx1) (result (SG_MAKE_INT -1)))
	((SG_NULLP rest)
	 (if (SG_UNBOUNDP fx2)
	     (if (SG_INTP fx1)
		 (result fx1)
		 (wrong-type-of-argument-violation 'fxand "fixnum" fx1))
	     (if (and (SG_INTP fx1) (SG_INTP fx2))
		 (result (SG_OBJ (logand (cast intptr_t fx1)
					 (cast intptr_t fx2))))
		 (wrong-type-of-argument-violation 'fxand "fixnum" fx1 fx2))))
	(else
	 (unless (and (SG_INTP fx1) (SG_INTP fx2))
	   (wrong-type-of-argument-violation 'fxand "fixnum" fx1 fx2))
	 (let ((ret (SG_OBJ (logand (cast intptr_t fx1)
				    (cast intptr_t fx2)))))
	   (fxlogop fxand ret logand rest)
	   (result ret)))))

(define-c-proc fxior
  (:optional fx1::<integer> fx2::<integer> :rest rest) :no-side-effect
  (cond ((SG_UNBOUNDP fx1) (result (SG_MAKE_INT 0)))
	((SG_NULLP rest)
	 (if (SG_UNBOUNDP fx2)
	     (if (SG_INTP fx1)
		 (result fx1)
		 (wrong-type-of-argument-violation 'fxior "fixnum" fx1))
	     (if (and (SG_INTP fx1) (SG_INTP fx2))
		 (result (SG_OBJ (logior (cast intptr_t fx1)
					 (cast intptr_t fx2))))
		 (wrong-type-of-argument-violation 'fxior "fixnum" fx1 fx2))))
	(else
	 (unless (and (SG_INTP fx1) (SG_INTP fx2))
	   (wrong-type-of-argument-violation 'fxior "fixnum" fx1 fx2))
	 (let ((ret (SG_OBJ (logior (cast intptr_t fx1) 
				    (cast intptr_t fx2)))))
	   (fxlogop fxior ret logior rest)
	   (result ret)))))

(define-c-proc fxxor 
  (:optional fx1::<integer> fx2::<integer> :rest rest) :no-side-effect
  (cond ((SG_UNBOUNDP fx1) (result (SG_MAKE_INT 0)))
	((SG_NULLP rest)
	 (if (SG_UNBOUNDP fx2)
	     (if (SG_INTP fx1)
		 (result fx1)
		 (wrong-type-of-argument-violation 'fxxor "fixnum" fx1))
	     (if (and (SG_INTP fx1) (SG_INTP fx2))
		 (result (SG_ENSURE_INT 
			  (logxor (cast intptr_t fx1) (cast intptr_t fx2))))
		 (wrong-type-of-argument-violation 'fxxor "fixnum" fx1 fx2))))
	(else
	 (unless (and (SG_INTP fx1) (SG_INTP fx2))
	   (wrong-type-of-argument-violation 'fxxor "fixnum" fx1 fx2))
	 (let ((ret (SG_OBJ (logxor (cast intptr_t fx1) 
				    (cast intptr_t fx2)))))
	   (fxlogop fxxor ret logxor rest)
	   (result (SG_ENSURE_INT ret))))))

(define-c-proc fxnot (fx::<fixnum>) ::<fixnum> :no-side-effect
  (result (lognot fx)))

(define-c-proc fxif (fx1::<fixnum> fx2::<fixnum> fx3::<fixnum>) ::<fixnum>
  :no-side-effect
  (result (fxlogif fx1 fx2 fx3)))

;; needs nbits and so
(decl-code
 (.include <sagittarius/private/bits.h>
	   <sagittarius/private/arith.h>))

(define-c-proc fxbit-count (fx::<fixnum>) ::<fixnum> :no-side-effect
  (if (>= fx 0)
      (result (nbits fx))
      (result (lognot (nbits (lognot fx))))))

(define-c-proc fxlength (fx::<fixnum>) ::<fixnum> :no-side-effect
  (if (== fx 0)
      (result 0)
      (let ((n2::long (?: (< fx 0) (lognot fx) fx)))
	(result (- WORD_BITS (nlz n2))))))

(define-c-proc fxfirst-bit-set (fx::<fixnum>) ::<fixnum> :no-side-effect
  (if (== fx 0)
      (result -1)
      (result (ntz fx))))

(define-c-proc fxbit-set? (fx1::<fixnum> fx2::<fixnum>) ::<boolean>
  :no-side-effect
  (when (< fx2 0)
    (assertion-violation 'fxbit-set? "invalid bit index" (SG_MAKE_INT fx2)))
  (if (>= fx2 SG_INT_SIZE)
      (result (< fx1 0))
      (result (logand (ashr fx1 fx2) 1))))

(define-cise-stmt check-fixnum-range
  ((_ name t start end start-op end-op)
   `(unless (and (,start-op ,start ,t)
		 (,end-op ,t ,end))
      (assertion-violation ',name "out of range" (SG_MAKE_INT ,t))))
  ((_ name t range op)
   `(unless (,op ,t ,range)
      (assertion-violation ',name "out of range" (SG_MAKE_INT ,t)))))

(define-c-proc fxcopy-bit (fx1::<fixnum> fx2::<fixnum> fx3::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-fixnum-range fxcopy-bit fx2 0 SG_INT_SIZE <= <=)
  (check-fixnum-range fxcopy-bit fx3 0 1 <= <=)
  (let ((mask::long (ashl 1 fx2)))
    (result (fxlogif mask (ashl fx3 fx2) fx1))))

(define-c-proc fxbit-field (fx1::<fixnum> fx2::<fixnum> fx3::<fixnum>) 
  ::<fixnum> :no-side-effect
  (check-fixnum-range fxbit-field fx2 0 SG_INT_SIZE <= <=)
  (check-fixnum-range fxbit-field fx3 0 SG_INT_SIZE <= <=)
  (when (> fx2 fx3)
    (assertion-violation 'fxbit-field
			 "out of range"
			 (SG_LIST3 (SG_MAKE_INT fx1)
				   (SG_MAKE_INT fx2)
				   (SG_MAKE_INT fx3))))
  (let ((mask::long (lognot (ashl (cast long -1) fx3))))
    (result (ashr (logand fx1 mask) fx2))))

(define-c-proc fxcopy-bit-field 
  (fx1::<fixnum> fx2::<fixnum> fx3::<fixnum> fx4::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-fixnum-range fxbit-field fx2 0 SG_INT_SIZE <= <=)
  (check-fixnum-range fxbit-field fx3 0 SG_INT_SIZE <= <=)
  (when (> fx2 fx3)
    (assertion-violation 'fxbit-field
			 "out of range"
			 (SG_LIST4 (SG_MAKE_INT fx1) (SG_MAKE_INT fx2)
				   (SG_MAKE_INT fx3) (SG_MAKE_INT fx4))))
  (let ((mask1::long (ashl -1 fx2))
	(mask2::long (lognot (ashl -1 fx3)))
	(mask::long (logand mask1 mask2)))
    (result (fxlogif mask (ashl fx4 fx2) fx1))))

(define-c-proc fxarithmetic-shift (fx1::<fixnum> fx2::<fixnum>) 
  ::<fixnum> :no-side-effect
  (when (> (labs fx2) SG_INT_SIZE)
    (assertion-violation 'fxarithmetic-shift "out of range"
			 (SG_LIST2 (SG_MAKE_INT fx1) (SG_MAKE_INT fx2))))
  (let ((ret::long 0))
    (if (>= fx2 0)
	(set! ret (ashl fx1 fx2))
	(set! ret (ashr fx1 (negate fx2))))
    (result-fixnum ret fxarithmetic-shift fx1 fx2)))

(define-c-proc fxarithmetic-shift-left (fx1::<fixnum> fx2::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-fixnum-range fxbit-field fx2 0 SG_INT_SIZE <= <=)
  (let ((ret::long (ashl fx1 fx2)))
    (result-fixnum ret fxarithmetic-shift-left fx1 fx2)))

(define-c-proc fxarithmetic-shift-right (fx1::<fixnum> fx2::<fixnum>) 
  ::<fixnum> :no-side-effect
  (check-fixnum-range fxbit-field fx2 0 SG_INT_SIZE <= <=)
  (let ((ret::long (ashr fx1 fx2)))
    (result-fixnum ret fxarithmetic-shift-right fx1 fx2)))

(decl-code 
 (.typedef "unsigned long" "ulong"))

(define-c-proc fxreverse-bit-field (fx1::<fixnum> fx2::<fixnum> fx3::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-fixnum-range fxbit-field fx2 0 SG_INT_SIZE <= <=)
  (check-fixnum-range fxbit-field fx3 0 SG_INT_SIZE <= <=)
  (when (> fx2 fx3)
    (assertion-violation 'fxreverse-bit-field "out of range"
			 (SG_LIST3 (SG_MAKE_INT fx1)
				   (SG_MAKE_INT fx2)
				   (SG_MAKE_INT fx3))))
  (let ((bits::ulong  fx1)
	(start::long fx2)
	(end::long   (- fx3 1)))
    (while (< start end)
      (let ((sbit::long (logand (ashr bits start) 1))
	    (ebit::long (logand (ashr bits end) 1)))
	(set! bits (logand bits (- (cast ulong -1) (ashl 1 end))))
	(set! bits (logior bits (ashl sbit end)))
	(set! bits (logand bits (- (cast ulong -1) (ashl 1 start))))
	(set! bits (logior bits (ashl ebit start)))
	(post++ start)
	(post-- end)))
    (result bits)))

(define (fxdiv-and-mod fx1 fx2)
  (values (fxdiv fx1 fx2) (fxmod fx1 fx2)))

(define (fxdiv0-and-mod0 fx1 fx2)
  (values (fxdiv0 fx1 fx2) (fxmod0 fx1 fx2)))

;; this is more troublesome than benefit if we implement in C
(define (fx+/carry fx1 fx2 fx3)
  (define (msg f) (format "fixnum required, but got ~a" f))
  (or (fixnum? fx1) (assertion-violation 'fx*/carry (msg fx1) fx1))
  (or (fixnum? fx2) (assertion-violation 'fx*/carry (msg fx2) fx2))
  (or (fixnum? fx3) (assertion-violation 'fx*/carry (msg fx3) fx3))
  (let* ((s (+ fx1 fx2 fx3))
	 (n (expt 2 (fixnum-width)))
	 (s0 (mod0 s n))
	 (s1 (div0 s n)))
    (values s0 s1)))
(define (fx-/carry fx1 fx2 fx3)
  (define (msg f) (format "fixnum required, but got ~a" f))
  (or (fixnum? fx1) (assertion-violation 'fx*/carry (msg fx1) fx1))
  (or (fixnum? fx2) (assertion-violation 'fx*/carry (msg fx2) fx2))
  (or (fixnum? fx3) (assertion-violation 'fx*/carry (msg fx3) fx3))
  (let* ((s (- fx1 fx2 fx3))
	 (n (expt 2 (fixnum-width)))
	 (s0 (mod0 s n))
	 (s1 (div0 s n)))
    (values s0 s1)))
(define (fx*/carry fx1 fx2 fx3)
  (define (msg f) (format "fixnum required, but got ~a" f))
  (or (fixnum? fx1) (assertion-violation 'fx*/carry (msg fx1) fx1))
  (or (fixnum? fx2) (assertion-violation 'fx*/carry (msg fx2) fx2))
  (or (fixnum? fx3) (assertion-violation 'fx*/carry (msg fx3) fx3))
  (let* ((s (+ (* fx1 fx2) fx3))
	 (n (expt 2 (fixnum-width)))
	 (s0 (mod0 s n))
	 (s1 (div0 s n)))
    (values s0 s1)))

;; from Ypsilon end
;; rotate
(define (fxrotate-bit-field fx1 fx2 fx3 fx4)
  (define (msg f) (format "fixnum required, but got ~a" f))
  (or (fixnum? fx1)
      (assertion-violation 'fxrotate-bit-field (msg fx1) fx1))
  (or (fixnum? fx2)
      (assertion-violation 'fxrotate-bit-field (msg fx2) fx2))
  (or (fixnum? fx3)
      (assertion-violation 'fxrotate-bit-field (msg fx3) fx3))
  (or (fixnum? fx4)
      (assertion-violation 'fxrotate-bit-field (msg fx4) fx4))
  (or (and (<= 0 fx2) (<= fx2 (fixnum-width)))
      (assertion-violation 'fxrotate-bit-field "invalid start index" fx2))
  (or (and (<= 0 fx3) (<= fx3 (fixnum-width)))
      (assertion-violation 'fxrotate-bit-field "invalid end index" fx3))
;; extension for SRFI-143, cound can be negative now.
;;   (or (and (<= 0 fx4) (<= fx4 (fixnum-width)))
;;       (assertion-violation 'fxrotate-bit-field "out of range (count)"
;; 			   fx1 fx2 fx3 fx4))
  (and (> fx2 fx3)
       (assertion-violation 'name "out of range (start > end)" fx1 fx2 fx3 fx4))
  (and (> fx4 (- fx3 fx2))
       (assertion-violation 'name "out of range (count > end - start)"
			    fx1 fx2 fx3 fx4))
  (let* ((n     fx1)
	 (start fx2)
	 (end   fx3)
	 (count fx4)
	 (width (- end start)))
    (if (fxpositive? width)
	(let* ((count (fxmod count width))
	       (field0 (fxbit-field n start end))
	       (field1 (fxarithmetic-shift-left field0 count))
	       (field2 (fxarithmetic-shift-right field0 (fx- width count)))
	       (field (fxior field1 field2)))
	  (fxcopy-bit-field n start end field))
	n)))

)


