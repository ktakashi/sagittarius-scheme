;; -*- Scheme -*-
#!read-macro=sagittarius/regex
(import (rnrs)
	(rnrs eval)
	(sagittarius cgen precomp)
	(sagittarius regex)
	(sagittarius control)
	(sagittarius compiler procedure)
	(sagittarius vm)
	(sagittarius aspect)
	(util file)
	(match)
	(getopt)
	(util port)
	(pp)
	(srfi :1)
	(srfi :13)
	(srfi :26)
	(srfi :39))

;; cancel inliner
(procedure-inliner-set! (find-procedure 'map '(core base)) #f)
(procedure-inliner-set! (find-procedure 'for-each '(core base)) #f)

(define-constant +default-compiler+ "../boot/compiler.scm")

;; We load the compiler libraries here as well
(define (load-compiler-libraries)
  ;; transition, changed the procedure arguments
  (%insert-binding '(sagittarius) 'make-compile-error
		   (lambda (form) (make-irritants-condition form)))
  (%insert-binding '(sagittarius) 'make-import-error
		   (lambda (form) (make-irritants-condition form)))
  (%insert-binding '(sagittarius vm debug) 'source-info*!
		   (lambda (p i . rest) p))
  (%insert-binding '(sagittarius vm debug) 'propagate-source-info*!
		   (lambda (p o . rest) p))
  (%insert-binding '(sagittarius vm debug) 'pair-annotations
		   (lambda (p) #f))
  (%insert-binding '(sagittarius vm debug) 'pair-annotation
		   (lambda (p k) #f))
  (%insert-binding '(sagittarius) 'make-syntax-pattern-condition
		   (lambda (p) #f))

  (load "../boot/lib/base.scm")
  (load "../boot/lib/errors.scm")
  (load "../boot/lib/macro.scm")
  (load "../boot/lib/compiler-util.scm")
  (load "../boot/lib/iform.scm")
  (load "../boot/lib/pass1.scm")
  (load "../boot/lib/pass2.scm")
  (load "../boot/lib/pass3.scm")
  (load "../boot/lib/pass4.scm")
  (load "../boot/lib/pass5.scm")
  (load "../boot/lib/inliner.scm")

  ;; override the implementation
  ;; for generating boot code, we need this to avoid to import unneccessary 
  ;; libraries.
  (eval '(define (check-expand-phase phases) (memq 'expand phases))
	(find-library '(sagittarius compiler pass1) #f)))

;; import specs for compiler 
;; we can use (rnrs) here since it won't be pre-compiled
;; ****CAUTION****
;; DO NOT USE INLINED PROCEDURES SUCH AS map AND for-each
;; So basically we can't use (rnrs)

(define-constant +targets-file+ "genlib.targets")

(define *features* (make-parameter '(sagittarius sagittarius.scheme.vm)))

(define (load-compiler options)
  (parameterize ((*features* '(sagittarius)))
    (let* ((sexp (call-with-input-file +default-compiler+ read))
	   ;; should we check the format?
	   (form `(library (sagittarius host compiler)
		      ,@(cddr sexp))))
      (eval form (environment '(only (sagittarius) library) 'user))
      (eval '(init-compiler) (find-library '(sagittarius host compiler) #f))
      (find-procedure 'compile '(sagittarius host compiler)))))

(define (name-generator filename libname)
  (define (path-directory filename)
    (let-values (((dir base ext) (decompose-path filename))) dir))
  (let-values (((out-file initfun-name) 
		(default-name-generator filename libname)))
    (let* ((dir (string-split (path-directory filename) #/[\/\\]/))
	   ;; FIXME currently we are using ../boot/... but
	   ;; for future we might move
	   (targets (drop dir 2))
	   (base (string-join targets "_")))
      (values (string-append base (if (zero? (string-length base))
				      "" "_") out-file)
	      initfun-name))))

(define-syntax aif
  (lambda (x)
    (syntax-case x ()
      ((aif expr then else)
       (with-syntax ((it (datum->syntax #'aif 'it)))
	 #'(let ((it expr))
	     (if it then else)))))))

(define (check-timestamp scm-file out-file)
  (not 
   (and (file-exists? out-file)
	;; check the timestamp
	(let ((target-mtime (file-stat-mtime scm-file))
	      (precomp-mtime (file-stat-mtime out-file)))
	  (and (< target-mtime precomp-mtime)
	       (print "generated file id older than target file. "
		      out-file))))))
      

(define (gen clean? force?)
  (define compiler #f)
  (define (do-clean file libname)
    (let ((filename (name-generator file libname)))
      (when (file-exists? filename) (delete-file filename))))
  (define (get-form/libname config)
    (let* ((file (cdr (assq 'file config)))
	   (form (call-with-input-file file read)))
      (values form (cadr form))))

  (call-with-input-file +targets-file+
    (lambda (in)
      (port-for-each
       (lambda (config)
	 (let-values (((file) (cdr (assq 'file config)))
		      ((form libname) (get-form/libname config)))
	   (if clean? 
	       (print "cleaning generated file from: " file)
	       (print "generating " libname " from file:" file))
	   (if clean?
	       (do-clean file libname)
	       (let ()
		 ;; clean needs to be done no matter what
		 (when (or force?
			   (check-timestamp file (name-generator file libname)))
		   (unless compiler
		     (load-compiler-libraries)
		     (set! compiler (load-compiler config)))
		   (cgen-precompile 
		    form
		    :in-file file
		    :name-generator name-generator
		    :predef-syms '(LIBSAGITTARIUS_BODY)
		    :compiler compiler))))))
       (lambda () (read in))))))
(define (main args)
  (with-args (cdr args)
      ((clean?  (#\c "clean") #f #f)
       (force?  (#\f "force") #f #f))
    (gen clean? force?)))
