;; -*- Scheme -*-
#!read-macro=sagittarius/regex
(import (rnrs)
	(clos user)
	(sagittarius control)
	(sagittarius object)
	(sagittarius cgen stub)
	(sagittarius cgen cise)
	(sagittarius cgen unit)
	(sagittarius cgen syntax)
	(sagittarius cgen literal)
	(sagittarius cgen type)
	(sagittarius cgen precomp)
	(sagittarius compiler)
	(srfi :13 strings)
	(srfi :39 parameters)
	(sagittarius vm)
	(sagittarius regex)
	(util file)
	(match)
	(getopt))

(define-form-parser define (name . body)
  (set! *scheme-definitions*
	(cons `(define ,name . ,body) *scheme-definitions*)))
(define-form-parser define-syntax (name . body)
  (set! *scheme-definitions*
	(cons `(define-syntax ,name . ,body) *scheme-definitions*)))

(define-class <c-variable> (<cgen-node>)
  ((scheme-name :init-keyword :scheme-name :init-value #f)
   (var-name :init-keyword :var-name)
   (c-expr :init-keyword :c-expr)
   (type   :init-keyword :type)))

;; boo
(define (extract-rettype forms)
  (define (type-symbol? s)
    (and (keyword? s) (#/^:[^:]/ (keyword->string s))))
  (define (type-symbol-type s)
    (string->symbol (string-drop (keyword->string s) 1)))
  (match forms
    ((:: type . body) (values body type))
    (((? type-symbol? ts) . body) (values body (type-symbol-type ts)))
    (_ (values forms #f))))

(define (name->type name)
  (or (cgen-type-from-name name)
      (error 'stub "unknown stub-type" name)))

(define-form-parser define-c-constant (name expr type)
  (let-values (((ignore rettype) (extract-rettype (list type))))
    (let ((cvar (make <c-variable>
		  :scheme-name name
		  :var-name (cgen-literal (symbol->string name))
		  :c-expr (cise-render-to-string expr 'expr)
		  :type (name->type rettype))))
      (cgen-add! cvar))))
(define-method cgen-emit-init ((cvar <c-variable>))
  (define type (slot-ref cvar 'type))
  (format #t "  Sg_InsertBinding(lib, Sg_Intern(~a), ~a(~a));~%"
	  (cgen-c-name (slot-ref cvar 'var-name))
	  (slot-ref type 'boxer)
	  (slot-ref cvar 'c-expr)))


(define *scheme-definitions* '())

(define (compile-scheme-definitions name imports)
  (let ((cb (compile `(library ,name
			(export :all)
			(import ,@imports)
			,@(reverse *scheme-definitions*))
		     (environment '(only (sagittarius) library)))))
    (values (cgen-literal cb) (find-library name #f))))

;; at this point all units are compiled
(define (emit-toplevel-executor name imports oexports topcb lib)
  (define (gen-exports unit)
    (define (collect-names defs)
      (filter-map (match-lambda (('define (name . args) rest ...) name)
				(('define name expr) name)
				(('define-syntax name expr) name)
				(_ #f))
		  defs))
    (append (collect-names (reverse! *scheme-definitions*))
	    (filter-map (lambda (node)
			  (and (or (is-a? node <cgen-c-proc>)
				   #;(is-a? node <cgen-c-variable>))
			       (slot-ref node 'scheme-name)))
			(cgen-unit-toplevel-nodes unit))
	    (if (memq :export-reader-macro oexports)
		'(:export-reader-macro)
		'())))

  (define (collect-macros)
    (filter macro? (hashtable-map
		    (lambda (name binding) (gloc-ref binding))
		    (library-table lib))))

  (cgen-body "static SgCodeBuilder *toplevel = ")
  (cgen-body (format "   SG_CODE_BUILDER(~a);" (cgen-cexpr topcb)))
  (let ((lib (find-library name #f)) ;; get the library
	(exports (or (and (memq :only-bindings oexports)
			  (gen-exports (cgen-current-unit)))
		     oexports))
	(macros (collect-macros)))
    ;; emit imports
    (for-each (lambda (i)
		;; we don't resolve any condition but for
		;; and for will be ignored
		(cond ((not (pair? i))
		       (cgen-init (format "  Sg_ImportLibrary(~a, ~a);~%"
					  (cgen-cexpr (cgen-literal lib))
					  (cgen-cexpr (cgen-literal i)))))
		      ((eq? (car i) 'for))
		      (else
		       (cgen-init 
			(format "  Sg_ImportLibrary(~a, ~a);~%"
				(cgen-cexpr (cgen-literal lib))
				(cgen-cexpr 
				 (cgen-literal 
				  (string->symbol (format "~a" i)))))))))
	      imports)
    ;; emit exports
    (for-each (lambda (e)
		(cgen-init (format "  SG_APPEND1(h, t, ~a); /* ~a */"
				   (cgen-cexpr (cgen-literal e))
				   (cgen-safe-comment e)))) exports)

    (cgen-init (format "  Sg_LibraryExportedSet(~a, Sg_Cons(h, SG_NIL));~%"
		       (cgen-cexpr (cgen-literal lib))))
    (when (memq :only-bindings oexports)
      (cgen-init (format "  SG_LIBRARY_AUTO_EXPORT(~a) = TRUE;~%"
			 (cgen-cexpr (cgen-literal lib)))))
    (cgen-init (format "  Sg_VM()->currentLibrary = ~a;" 
		       (cgen-cexpr (cgen-literal lib))))
    (cgen-init (format "  Sg_VMExecute(SG_OBJ(toplevel));"))

    (unless (null? macros)
      (let ((core-macro (gensym))
	    (gloc (gensym))
	    (unit (cgen-current-unit)))
	(define (literalise m)
	  (let1 ml (cgen-literal m)
	    (cgen-init (format "    Sg_InsertBinding(SG_LIBRARY(~a), ~a, ~a);~%"
			       (cgen-cexpr (cgen-literal lib))
			       (cgen-cexpr (cgen-literal (macro-name m)))
			       (cgen-cexpr ml)))))
	(set! (~ unit 'init-prologue)
	      (string-append
	       (~ unit 'init-prologue)
	       (format "  SgObject ~a = Sg_FindLibrary(SG_INTERN(~s), FALSE);~%"
		       core-macro "(core macro)")
	       (format "  SgObject ~a = Sg_FindBinding(~a, SG_INTERN(~s), SG_UNDEF);~%"
		       gloc core-macro "macro-transform")
	       (format "  SgObject macro_transform = SG_GLOC_GET(SG_GLOC(~a));~%"
		       gloc)))
	(for-each literalise macros)))
    
    (cgen-init "  Sg_VM()->currentLibrary = save;")))

(define (cgen-gen-c form c-file :key (predef-syms '()))
  (set! *scheme-definitions* '())
  (match form
    (('library (names ...)
         ('export exports ...)
	 ('import imports ...)
       defs ...)
    (let1 prefix
	(cgen-safe-name-friendly (string-join (map ->string names) "_"))
      (parameterize ((cgen-current-unit
		      (make <cgen-stub-unit>
			:name names
			:c-file c-file
			:c-name-prefix (string-append prefix "_")
			:preamble '("/*Generated by genstub. Do not edit.*/")
			:init-prologue
			(format "void Sg__Init_~a(SgLibrary *lib) {\n" prefix)
			)))
	(for-each cgen-define predef-syms)
	(cgen-stub-parse-form form)
	(unless (null? *scheme-definitions*)
	  (let-values (((topcb lib) (compile-scheme-definitions names imports)))
	    (emit-toplevel-executor names imports exports topcb lib))
	  (cond ((cgen-unit-init-prologue (cgen-current-unit)) =>
		 (lambda (prev)
		   (cgen-unit-init-prologue (cgen-current-unit)
		     (string-append prev
		       "\n  SgObject save = Sg_VM()->currentLibrary;\n"
		       "SgObject t = SG_NIL, h = SG_NIL;\n"))))))
	(cgen-emit-c (cgen-current-unit)))))))

(define (read-with-source :optional (in (current-input-port)))
  (read in :source-info? #t))

(define (gen files force? clean?)
  (define (do-gen f c)
    (define (prompt f c)
      (format #t "~a ...~!" f)
      (let ((form (call-with-input-file f read-with-source)))
	(cgen-gen-c form c))
      (print "done!"))
    (let1 exist? #f
      (if (and (not force?) (file-exists? c))
	  (let ((stub-mtime (file-stat-mtime f))
		(out-mtime  (file-stat-mtime c)))
	    (if (< stub-mtime out-mtime)
		(print "generated file is older than stub file. " c)
		(prompt f c)))
	  (prompt f c))))
  (if clean?
      (print "cleaning generated file from: " files)
      (print (if force? "force " "") "generating files:" files))
  (for-each (^f (let* ((b (path-sans-extension f))
		       (c (format "~a.c" b)))
		  (if clean?
		      (when (file-exists? c) (delete-file c))
		      (do-gen f c))))
	    files))
(define (main args)
  (with-args args
      ((force? (#\f "force") #f #f)
       (clean? (#\c "clean") #f #f))
    (gen (find-files "." :pattern #/\.stub$/ :recursive #f) force? clean?)))
