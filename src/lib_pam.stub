;; lib_pam.stub                                -*- mode:scheme; coding:utf-8; -*-
;;
;;  Copyright (c) 2017-2021  Takashi Kato <ktakashi@ymail.com>
;;
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions
;;  are met:
;;
;;  1. Redistributions of source code must retain the above copyright
;;     notice, this list of conditions and the following disclaimer.
;;
;;  2. Redistributions in binary form must reproduce the above copyright
;;     notice, this list of conditions and the following disclaimer in the
;;     documentation and/or other materials provided with the distribution.
;;
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(library (sagittarius pam)
    (export pam-authenticate
	    pam-invalidate-token!
	    get-passwd
	    passwd?
	    passwd-name passwd-gecos passwd-dir
	    passwd-shell
	    auth-token?
	    auth-token-passwd
	    call-with-auth-token
	    *pam:conversation-error-handler*)
    (import (core)
	    (sagittarius))
(decl-code
 (.define "LIBSAGITTARIUS_BODY")
 (.include <string.h>
	   <sagittarius/private.h>
	   <sagittarius/private/pam.h>))

(define-type <auth-token> "SgAuthToken *")
(define-type <passwd> "SgPasswd *")

(define-c-proc passwd? (o) ::<boolean> :constant SG_PASSWDP)
(define-c-proc get-passwd (n::<string>) Sg_GetPasswd)
(define-cise-stmt ->scheme-string
  ((_ expr)
   `(let ((v ,expr))
      (result (Sg_Utf8sToUtf32s v (strlen v))))))
(define-c-proc passwd-name (o) (->scheme-string (SG_PASSWD_NAME o)))
(define-c-proc passwd-gecos (o) (->scheme-string (SG_PASSWD_GECOS o)))
(define-c-proc passwd-dir (o) (->scheme-string (SG_PASSWD_DIR o)))
(define-c-proc passwd-shell (o) (->scheme-string (SG_PASSWD_SHELL o)))

(define-c-proc %pam-authenticate
  (service::<string> user::<passwd> conv::<procedure>)
  Sg_PamAuthenticate)

(define-c-proc pam-invalidate-token! (token::<auth-token>) ::<void>
  Sg_PamInvalidateToken)

(define-c-proc auth-token? (o) ::<boolean> :constant SG_AUTH_TOKEN_P)
(define-c-proc auth-token-name (token::<auth-token>) SG_AUTH_TOKEN_PASSWD)

(define (default-error-handler e))
(define *pam:conversation-error-handler* 
  (make-core-parameter default-error-handler))

(define (pam-authenticate service user conv)
  (call/cc (lambda (guard-k)
	     (with-error-handler
	       (lambda (e)
		 ;; return #f in any case
		 (with-error-handler
		   (lambda (e) (guard-k #f))
		   (lambda ()
		     ((*pam:conversation-error-handler*) e)
		     (guard-k #f))))
	       (lambda ()
		 (let ((passwd (if (string? user) (get-passwd user) user)))
		   (%pam-authenticate service passwd conv)))))))

(define (call-with-auth-token service username conv proc)
  (cond ((pam-authenticate service username conv) =>
	 (lambda (token)
	   (proc token)
	   (pam-invalidate-token! token)))
	(else #f)))

)
