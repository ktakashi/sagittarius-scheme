;; -*- scheme -*-
#!compatible
(library (sagittarius vm)
    (export :all)
    (import :none)
  (decl-code
   (.define "LIBSAGITTARIUS_BODY")
   (.include <sagittarius/private.h>
	     <sagittarius/private/instruction.h>))

  ;; TODO duplicated definition in Scheme
  (decl-code
   (.define "LEXICAL"    "SG_MAKE_INT(0)")
   (.define "BOUNDARY"   "SG_MAKE_INT(3)")
   (.define "ENV_BOTTOM" "SG_MAKE_INT(4)"))

  (define-cise-stmt assertion-violation
    ((_ who msg)
     `(begin
	(Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) '())))
    ((_ who msg irritants)
     `(begin
	(Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) ,irritants)
	 )))

  (define-cise-stmt wrong-type-of-argument-violation
    ((_ who msg got)
     `(begin
	(Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got '())))
    ((_ who msg got irritants)
     `(begin
	(Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got ,irritants))))

  (define-c-proc insn-name (insn::<fixnum>)
    (let ((info::InsnInfo* (Sg_LookupInsnName (cast int insn))))
      (result (Sg_MakeStringC (-> info name)))))

  ;; identifier
  (define-c-proc make-raw-identifier
    (name envs identity library::<library> pending?::<boolean>)
    Sg_MakeRawIdentifier)
  (define-c-proc make-global-identifier (name::<symbol> library::<library>)
    Sg_MakeGlobalIdentifier)

  (define-c-proc copy-identifier (name id::<identifier>)
    (unless (or (SG_SYMBOLP name) (SG_IDENTIFIERP name))
      (wrong-type-of-argument-violation 'make-identifier 
					"symbol or identifier" name))
    (let ((new-id (Sg_MakeIdentifier name '()
				     (SG_IDENTIFIER_LIBRARY id))))
      (set! (SG_IDENTIFIER_IDENTITY new-id) (SG_IDENTIFIER_IDENTITY id))
      (set! (SG_IDENTIFIER_ENVS new-id) (SG_IDENTIFIER_ENVS id))
      (result new-id)))

  #|
  TODO since we are renaming identifiers whose identify is not #f
       means not a global identifier, we should be able to remove
       the pending slot.
  |#
  (define-c-proc pending-identifier? (o) ::<boolean>
    (result (and (SG_IDENTIFIERP o) (SG_IDENTIFIER_PENDING o))))

  (define-c-proc rename-pending-identifier! (id::<identifier>)
    (when (or (SG_IDENTIFIER_PENDING id)
	      ;; if this is not global identifier, then we
	      ;; can rename.
	      ;; NB: this must be called only from compiler.
	      (not (SG_FALSEP (SG_IDENTIFIER_IDENTITY id))))
      (set! (SG_IDENTIFIER_NAME id) 
	    (Sg_MakeUniqueSymbol (-> (SG_SYMBOL (SG_IDENTIFIER_NAME id)) name)))
      ;; Issue 86
      ;; now pending identifiers hold macro environment but when it
      ;; needs to be renamed, it must hold use environment as its 
      ;; context.
      (set! (SG_IDENTIFIER_LIBRARY id) (Sg_VMCurrentLibrary)))
    (result id))

  (define-c-proc id-envs (id::<identifier>) SG_IDENTIFIER_ENVS)
  (define-c-proc id-library (id::<identifier>) SG_IDENTIFIER_LIBRARY)
  (define-c-proc id-identity (id::<identifier>) SG_IDENTIFIER_IDENTITY)

  ;; syntax
  (define-c-proc make-syntax (name::<symbol> proc) Sg_MakeSyntax)

  (define-c-proc syntax-name (arg0::<syntax>) SG_SYNTAX_NAME)

  (define-c-proc syntax-proc (arg0::<syntax>) SG_SYNTAX_PROC)

  (define-c-proc syntax? (arg0) ::<boolean> SG_SYNTAXP)

  (define-c-proc call-syntax-handler (s::<syntax> expr p1env)
    (result (Sg_VMApply2 (SG_SYNTAX_PROC s) expr p1env)))

  ;; macro
  (define-c-proc macro? (obj) ::<boolean> SG_MACROP)
  (define-c-proc make-macro (name transformer data p1env
				  :optional (cb::<code-builder> NULL))
    (unless (SG_CLOSUREP transformer)
      (wrong-type-of-argument-violation 'make-macro "closure" transformer))
    (result (Sg_MakeMacro name (SG_CLOSURE transformer) data p1env cb)))
  
  (define-c-proc macro-env (m::<macro>) (result (-> m env)))
  (define-c-proc macro-name (m::<macro>) (result (-> m name)))
  ;; ... this is dangerous.
  (define-c-proc macro-data (m::<macro>) (result (-> m data)))
  (define-c-proc macro-transformer (m::<macro>) (result (-> m transformer)))
  (define-c-proc macro-compiled-code (m::<macro>)
    (let ((cb::SgCodeBuilder* (-> m compiledCode)))
      (if cb (result cb) (result SG_FALSE))))

  (define-c-proc call-macro-expander (macro::<macro> expr p1env)
    (result (Sg_VMApply4 (-> macro transformer)
			 macro expr p1env (-> macro data))))

  ;; library
  ;; it's not used anyway
  ;; (define-c-proc make-library (name) Sg_MakeLibrary)
  
  (define-c-proc library? (arg0) ::<boolean> SG_LIBRARYP)
  (define-c-proc library-name (arg0::<library>) SG_LIBRARY_NAME)
  (define-c-proc library-imported (arg0::<library>) SG_LIBRARY_IMPORTED)
  (define-c-proc library-imported-set! (arg0::<library> arg1) ::<void>
    (set! (SG_LIBRARY_IMPORTED arg0) arg1))
  (define-c-proc library-exported (arg0::<library>) SG_LIBRARY_EXPORTED)
  (define-c-proc library-exported-set! (arg0::<library> arg1) ::<void>
    Sg_LibraryExportedSet)
  (define-c-proc library-exported-add! (arg0::<library> arg1) ::<void>
    Sg_LibraryExportedAdd)
  (define-c-proc library-defined (lib) 
    (cond ((SG_LIBRARYP lib) (result (SG_LIBRARY_DEFINEED lib)))
	  ((SG_FALSEP lib) (result (SG_LIBRARY_DEFINEED (Sg_VMCurrentLibrary))))
	  (else (wrong-type-of-argument-violation 'library-defined 
						  "library or #f" lib))))
  (define-c-proc library-defined-add! (lib::<library> v) ::<void>
    (unless (or (SG_SYMBOLP v) (SG_IDENTIFIERP v))
      (wrong-type-of-argument-violation 'library-defined-add!
					"symbol or identifier" v))
    (when (SG_IDENTIFIERP v) (set! v (SG_IDENTIFIER_NAME v)))
    (let ((def (SG_LIBRARY_DEFINEED lib)))
      (when (and (not (SG_FALSEP def)) (SG_FALSEP (Sg_Memq v def)))
	(set! (SG_LIBRARY_DEFINEED lib) (Sg_Cons v def)))))
  (define-c-proc library-table (lib::<library>) SG_LIBRARY_TABLE)
  (define-c-proc library-parents (lib::<library>) SG_LIBRARY_PARENTS)
  (define-c-proc library-mutable? (lib::<library>) ::<boolean> 
    SG_LIBRARY_MUTABLEP)

  (define-c-proc find-library (arg0 createp::<boolean>) Sg_FindLibrary)

  (define-c-proc %insert-binding (libname name value) ::<void>
    (unless (or (SG_SYMBOLP name)
		(SG_IDENTIFIERP name))
      (wrong-type-of-argument-violation '%insert-binding
					"symbol or identifier"
					name))
    (let ((lib::SgObject (Sg_FindLibrary libname TRUE)))
      (Sg_InsertBinding lib name value)))

  (define-c-proc find-binding (arg0 arg1::<symbol> callback) Sg_FindBinding)

  (define-c-proc import-library (to from spec transp) ::<void>
    (Sg_ImportLibraryFullSpec to from spec))

  (define-c-proc vm-current-library (:optional name::<library>)
    (let ((vm::SgVM* (Sg_VM)))
      (if (SG_UNBOUNDP name)
	  (result (-> vm currentLibrary))
	  (begin
	    (set! (-> vm currentLibrary) name)
	    ; dummy
	    (result SG_UNDEF)))))

  ;; gloc
  (define-c-proc gloc-ref (g::<gloc>) SG_GLOC_GET)
  (define-c-proc gloc-set! (g::<gloc> value) ::<void> SG_GLOC_SET)
  (define-c-proc gloc-bound? (g::<gloc>) ::<boolean>
    (result (not (SG_UNBOUNDP (SG_GLOC_GET g)))))
  (define-c-proc gloc-const? (g::<gloc>) ::<boolean> Sg_GlocConstP)
  (define-c-proc gloc-library (g::<gloc>) (result (-> g library)))
  (define-c-proc gloc-name (g::<gloc>)    (result (-> g name)))

  ;; closure
  (define-c-proc make-toplevel-closure (cb::<code-builder>)
    ;; topleve closure should not have any free variables
    (result (Sg_MakeClosure cb NULL)))
  (define-c-proc closure->code-vector (cl)
    (unless (SG_CLOSUREP cl)
      (wrong-type-of-argument-violation 'closure->code-vector "closure" cl))
    (result (Sg_CodeBuilderToVector (-> (SG_CLOSURE cl) code))))

;;   (define-c-proc closure->code-builder (cl)
;;     (unless (SG_CLOSUREP cl)
;;       (wrong-type-of-argument-violation 'closure->code-builder "closure" cl))
;;     (result (-> (SG_CLOSURE cl) code)))
  
  ;; code-builder
  (define-c-proc make-code-builder ()
    (result (Sg_MakeCodeBuilder 2)))
  (define-c-proc code-builder? (o) ::<boolean> SG_CODE_BUILDERP)

  (define-c-proc cb-emit0! (cb::<code-builder> insn::<fixnum>) ::<void>
    (Sg_CodeBuilderEmit cb (cast int insn) ARGUMENT0 0 0 SG_UNDEF))

  (define-c-proc cb-emit1! (cb::<code-builder> insn::<fixnum> arg0::<fixnum>) ::<void>
    (Sg_CodeBuilderEmit cb (cast int insn) ARGUMENT0 arg0 0 SG_UNDEF))
  
  (define-c-proc cb-emit2! (cb::<code-builder> insn::<fixnum> arg0::<fixnum> arg1::<fixnum>) ::<void>
    (Sg_CodeBuilderEmit cb insn ARGUMENT0 arg0 arg1 SG_UNDEF))

  (define-c-proc cb-emit0i! (cb::<code-builder> insn::<fixnum> src) ::<void>    
    (Sg_CodeBuilderEmit cb insn ARGUMENT0 0 0 SG_UNDEF)
    (Sg_CodeBuilderAddSrc cb (cast int insn) src))

  (define-c-proc cb-emit1i! (cb::<code-builder> insn::<fixnum> arg0::<fixnum> src) ::<void>
    (Sg_CodeBuilderEmit cb insn ARGUMENT0 arg0 0 SG_UNDEF)
    (Sg_CodeBuilderAddSrc cb (cast int insn) src))

  (define-c-proc cb-emit2i! (cb::<code-builder> insn::<fixnum> arg0::<fixnum> arg1::<fixnum> src) ::<void>
    (Sg_CodeBuilderEmit cb insn ARGUMENT0 arg0 arg1 SG_UNDEF)
    (Sg_CodeBuilderAddSrc cb (cast int insn) src))

  (define-c-proc cb-emit0o! (cb::<code-builder> insn::<fixnum> obj) ::<void>
    (Sg_CodeBuilderEmit cb (cast int insn) ARGUMENT1 0 0 obj))

  (define-c-proc cb-emit0oi! (cb::<code-builder> insn::<fixnum> obj src) ::<void>
    (Sg_CodeBuilderEmit cb (cast int insn) ARGUMENT1 0 0 obj)
    (Sg_CodeBuilderAddSrc cb (cast int insn) src))

  (define-c-proc cb-emit1oi! (cb::<code-builder> insn::<fixnum> arg0::<fixnum> obj src) ::<void>
    (Sg_CodeBuilderEmit cb (cast int insn) ARGUMENT1 arg0 0 obj)
    (Sg_CodeBuilderAddSrc cb (cast int insn) src))

  (define-c-proc cb-label-set! (cb::<code-builder> label) ::<void>
    (Sg_CodeBuilderLabelSet cb label))

  (define-c-proc cb-emit-closure! (cb::<code-builder> 
				   insn::<fixnum>
				   lambda_cb::<code-builder>
				   name 
				   req_argc::<fixnum>
				   opt::<boolean>
				   freec::<fixnum>
				   max_stack::<fixnum>
				   src) ::<void>
    (set! (SG_CODE_BUILDER_NAME lambda_cb) name)
    (set! (SG_CODE_BUILDER_ARGC lambda_cb) (cast int req_argc))
    (set! (SG_CODE_BUILDER_OPTIONAL lambda_cb) (cast int opt))
    (set! (SG_CODE_BUILDER_FREEC lambda_cb) (cast int freec))
    (set! (SG_CODE_BUILDER_MAX_STACK lambda_cb) (cast int max_stack))
    (Sg_CodeBuilderFlush lambda_cb)
    (Sg_CodeBuilderEmit cb (cast int insn) ARGUMENT1 0 0 lambda_cb)
    (Sg_CodeBuilderAddSrc lambda_cb (cast int insn) src))

  ;; for local closure
  (define-c-proc cb-emit-local-closure! (cb::<code-builder> 
					 self-pos::<fixnum>
					 lambda_cb::<code-builder>
					 name 
					 req_argc::<fixnum>
					 opt::<boolean>
					 freec::<fixnum>
					 max_stack::<fixnum>
					 src) ::<void>
    (set! (SG_CODE_BUILDER_NAME lambda_cb) name)
    (set! (SG_CODE_BUILDER_ARGC lambda_cb) (cast int req_argc))
    (set! (SG_CODE_BUILDER_OPTIONAL lambda_cb) (cast int opt))
    (set! (SG_CODE_BUILDER_FREEC lambda_cb) (cast int freec))
    (set! (SG_CODE_BUILDER_MAX_STACK lambda_cb) (cast int max_stack))
    (Sg_CodeBuilderFlush lambda_cb)
    (Sg_CodeBuilderEmit cb CLOSURE ARGUMENT1 self-pos 0 lambda_cb)
    (Sg_CodeBuilderAddSrc lambda_cb CLOSURE src))

  (define-c-proc code-builder-label-defs (cb::<code-builder>)
    (result (-> cb labelDefs)))

  (define-c-proc code-builder-finish-builder (cb::<code-builder> last::<fixnum>)
    (result (Sg_CodeBuilderFinishBuilder cb (cast int last))))

  ;; misc
  (define-c-proc vm-r6rs-mode? () ::<boolean>
    (result (SG_VM_IS_SET_FLAG (Sg_VM) SG_R6RS_MODE)))
  (define-c-proc vm-core-mode? () ::<boolean>
    (result (== (logand (ashr (-> (Sg_VM) flags) 8) #xFF) 0)))
  (define-c-proc vm-no-overwrite? () ::<boolean>
    (result (not (SG_VM_IS_SET_FLAG (Sg_VM) SG_ALLOW_OVERWRITE))))
  (define-c-proc vm-error-unbound? () ::<boolean>
    (result (SG_VM_IS_SET_FLAG (Sg_VM) SG_ERROR_UNBOUND)))

  ;; (%map-cons l1 l2) = (map cons l1 l2)
  (define-c-proc %map-cons (l1 l2)
    (let ((h SG_NIL) (t SG_NIL))
      (while (and (SG_PAIRP l1) (SG_PAIRP l2))
	(SG_APPEND1 h t (Sg_Cons (SG_CAR l1) (SG_CAR l2)))
	(set! l1 (SG_CDR l1))
	(set! l2 (SG_CDR l2)))
      (result h)))
 
  ;; compare all identity element in sense of eq?
  ;; identifiers bound in the same macro expansion must share
  ;; the same identity.
  (define-cfn list-eq? (l1 l2) ::int :static
    (while (and (SG_PAIRP l1) (SG_PAIRP l2))
      (unless (SG_EQ (SG_CAR l1) (SG_CAR l2)) (return FALSE))
      (set! l1 (SG_CDR l1))
      (set! l2 (SG_CDR l2)))
    (return (SG_EQ l1 l2)))
  (define-cfn identity-eq? (identity1 id2) ::int :static
    (let ((identity2 (SG_IDENTIFIER_IDENTITY id2)))
       ;; shortcut (#f #f) case, I guess
      (cond ((SG_EQ identity1 identity2) (return TRUE))
	    ((or (SG_FALSEP identity1) (SG_FALSEP identity2))
	     (return FALSE))
	    (else (return (list-eq? identity1 identity2))))))
    
  (define-cfn p1env-lookup-inner 
    (p1env::SgVector* name lookup_as boundary)
    :static
    (let ((lib (SG_VECTOR_ELEMENT p1env 0))
	  (frames (SG_VECTOR_ELEMENT p1env 1))
	  (saved-env SG_NIL)
	  (saved-identity SG_FALSE))
      (when (SG_IDENTIFIERP name)
	(set! saved-env (SG_IDENTIFIER_ENVS name))
	(set! saved-identity (SG_IDENTIFIER_IDENTITY name)))
      (label retry)
      (dopairs (fp frames)
	;; don't go over boundary
	(when (SG_EQ boundary (SG_CAAR fp)) (return name))
	;; not interesting
	(unless (== (SG_CAAR fp) lookup_as) (continue))
	
	(dolist (vp (SG_CDAR fp))
	  (when (or (SG_EQ name (SG_CAR vp)) ;; simple case
		    ;; raw symbols are treated as global identifier
		    ;; so comparison is done by name and null env.
		    (and (SG_SYMBOLP name)
			 (SG_IDENTIFIERP (SG_CAR vp))
			 (SG_EQ name (SG_IDENTIFIER_NAME (SG_CAR vp)))
			 (SG_NULLP (SG_IDENTIFIER_ENVS (SG_CAR vp)))
			 (SG_EQ (SG_IDENTIFIER_LIBRARY (SG_CAR vp)) lib))
		    (and (SG_SYMBOLP (SG_CAR vp))
			 (SG_IDENTIFIERP name)
			 (SG_EQ (SG_CAR vp) (SG_IDENTIFIER_NAME name))
			 ;; top environment must be null
			 (SG_NULLP saved-env)
			 (SG_FALSEP saved-identity)
			 (SG_EQ (SG_IDENTIFIER_LIBRARY name) lib))
		    ;; bound identifier comparison
		    (and (SG_IDENTIFIERP (SG_CAR vp))
			 (SG_IDENTIFIERP name)
			 (SG_EQ (SG_IDENTIFIER_NAME (SG_CAR vp))
				(SG_IDENTIFIER_NAME name))
			 (SG_EQ (SG_IDENTIFIER_LIBRARY (SG_CAR vp))
				(SG_IDENTIFIER_LIBRARY name))
			 (identity-eq? saved-identity (SG_CAR vp)))
		    ;; should not use env
		    )
	    (return vp))))
      ;; for local macro thing
      (when (not (SG_NULLP saved-env))
	(set! frames (SG_CAR saved-env))
	(set! saved-env (SG_CDR saved-env))
	(set! saved-identity (SG_CDR saved-identity))
	(goto retry))
      (return name)))

  (define-c-proc p1env-lookup 
    (p1env::<vector> name lookup_as :optional (boundary #f))
    (let ((r (p1env-lookup-inner p1env name lookup_as boundary)))
      (cond ((SG_PAIRP r) (result (SG_CDR r)))
	    ((SG_SYMBOLP r)
	     (let ((lib (SG_VECTOR_ELEMENT p1env 0)))
	       (result (Sg_MakeIdentifier (SG_SYMBOL r) '() (SG_LIBRARY lib)))))
	    (else (result r)))))

  (define-c-proc p1env-lookup-rib
    (p1env::<vector> name lookup_as :optional (boundary #f))
    (let ((r (p1env-lookup-inner p1env name lookup_as boundary)))
      (if (SG_PAIRP r)
	  (result r)
	  (result SG_FALSE))))
  
  (define-c-proc vm-free-identifier=?
    (id1::<identifier> id2::<identifier> use-env::<vector>)
    ::<boolean>
    (if (SG_EQ (SG_IDENTIFIER_NAME id1) (SG_IDENTIFIER_NAME id2))
	(let ((v1 (p1env-lookup-inner use-env id1 LEXICAL #f))
	      (v2 (p1env-lookup-inner use-env id2 LEXICAL #f)))
	  (if (and (not (SG_PAIRP v1)) (not (SG_PAIRP v2)))
	      (let ((g1 (Sg_FindBinding (SG_IDENTIFIER_LIBRARY id1)
					(SG_IDENTIFIER_NAME id1) #f))
		    (g2 (Sg_FindBinding (SG_IDENTIFIER_LIBRARY id2)
					(SG_IDENTIFIER_NAME id2) #f)))
		(result (SG_EQ g1 g2)))
	      (result (SG_EQ v1 v2))))
	(let ((g1 (Sg_FindBinding (SG_IDENTIFIER_LIBRARY id1)
					(SG_IDENTIFIER_NAME id1) #f))
	      (g2 (Sg_FindBinding (SG_IDENTIFIER_LIBRARY id2)
				  (SG_IDENTIFIER_NAME id2) #f)))
	  (result (and (not (SG_FALSEP g1))
		       (not (SG_FALSEP g2))
		       (SG_EQ g1 g2))))))

  (define-c-proc bound-identifier=?
    (id1::<identifier> id2::<identifier>)
    ::<boolean>
    (cond ((SG_EQ id1 id2) (result TRUE))
	  ((SG_EQ (SG_IDENTIFIER_NAME id1) (SG_IDENTIFIER_NAME id2))
	   (result (identity-eq? (SG_IDENTIFIER_IDENTITY id1) id2)))
	  (else (result FALSE))))
  
  ;; check all env frames are macro
  (define-cfn check-env-frame (frames) ::int :static
    ;; if the frame is null then it's definitely
    ;; (let () ...) thing. let(rec)-syntax's bindings are
    ;; merged to the environment
    (when (SG_NULLP frames) (return TRUE))
    (dolist (frame frames)
      (unless (and (SG_PAIRP frame) (SG_MACROP (SG_CDR frame)))
	(return TRUE)))
    (return FALSE))

  (define-c-proc p1env-toplevel? (p1env) ::<boolean>
    (dolist (fp (SG_VECTOR_ELEMENT p1env 1))
      (when (and (== (SG_CAR fp) LEXICAL)
		 ;; if we slice let-syntax then however env contains
		 ;; frame already so we need to check if the frame only
		 ;; contains macro in that case it's toplevel let(rec)-syntax
		 ;; TODO this might cause some problem...
		 (check-env-frame (SG_CDR fp)))
	  (return SG_FALSE)))
    (result TRUE))

  (define-c-proc vm-frame-size () ::<fixnum>
    (result SG_FRAME_SIZE))

  (define-c-proc print-stack-frames (:optional (vm::<thread> #f)) ::<void>
    (if (SG_FALSEP vm)
	(Sg_VMPrintFrameOf (Sg_VM))
	(Sg_VMPrintFrameOf vm)))

  (define-c-proc get-stack-trace-object ()
    (result (Sg_VMGetStackTraceOf (Sg_VM) SG_STACK_TRACE_ALL 0)))
  (define-c-proc format-stack-trace 
    (o :optional (out::<port> (Sg_CurrentOutputPort))) ::<void>
    Sg_FormatStackTrace)

  ;; optimize
  (define-c-proc vm-noinline-locals? () ::<boolean>
    (result (SG_VM_IS_SET_FLAG (Sg_VM) SG_NO_INLINE_LOCAL)))

  (define-c-proc vm-nolambda-lifting? () ::<boolean>
    (result (SG_VM_IS_SET_FLAG (Sg_VM) SG_NO_LAMBDA_LIFT)))

  (define-c-proc vm-nolibrary-inlining? () ::<boolean>
    (result (SG_VM_IS_SET_FLAG (Sg_VM) SG_NO_LIBRARY_INLINING)))

  (define-c-proc vm-noconstant-inlining? () ::<boolean>
    (result (SG_VM_IS_SET_FLAG (Sg_VM) SG_NO_CONST_INLINING)))
  
  ;; call/pc
  (define-c-proc %call/pc (p::<procedure>) Sg_VMCallPC)
  (define-c-proc %apply0 (p) Sg_Apply0)

  ;; misc
  (define-c-proc vm-warn (msg::<string>)
    (let ((vm::SgVM* (Sg_VM)))
      (when (SG_VM_LOG_LEVEL vm SG_WARN_LEVEL)
	(Sg_Printf (-> vm logPort) (UC "WARNING: %A\n") msg))))

  (define-c-proc code-builder->vector (cb::<code-builder>) 
    Sg_CodeBuilderToVector)
  (define-c-proc code-builder-name (cb::<code-builder>) Sg_CodeBuilderFullName)
  (define-c-proc code-builder-maxstack (cb::<code-builder>) ::<fixnum>
    SG_CODE_BUILDER_MAX_STACK)
  (define-c-proc code-builder-argc (cb::<code-builder>) ::<fixnum>
    SG_CODE_BUILDER_ARGC)
  (define-c-proc code-builder-freec (cb::<code-builder>) ::<fixnum>
    SG_CODE_BUILDER_FREEC)
  (define-c-proc code-builder-optional (cb::<code-builder>) ::<fixnum>
    SG_CODE_BUILDER_OPTIONAL)

  (define-c-proc insn-info (insn::<integer>)
    (let* ((i::int64_t     (Sg_GetIntegerS64Clamp insn SG_CLAMP_NONE NULL))
	   (info::InsnInfo* (Sg_LookupInsnName (cast Instruction (INSN i)))))
      (if info
	  ;; it's better to use record or something?
	  (result (Sg_Values5 (SG_LIST2
			       (Sg_Intern (Sg_MakeStringC (-> info name)))
			       (SG_MAKE_INT (-> info number)))
			      (SG_MAKE_INT (-> info instValues))
			      (SG_MAKE_INT (-> info argc))
			      (SG_MAKE_BOOL (-> info hasSrc))
			      (SG_MAKE_BOOL (-> info label))))
	  (result (Sg_Values5 SG_FALSE SG_FALSE SG_FALSE SG_FALSE SG_FALSE)))))

  (define-c-proc insn-value1 (insn::<integer>) ::<fixnum> INSN_VALUE1)
  (define-c-proc insn-value2 (insn::<integer>)
    (let ((v1::int 0)
	  (v2::int 2))
      (INSN_VAL2 v1 v2 insn)
      (result (Sg_Values2 (SG_MAKE_INT v1) (SG_MAKE_INT v2)))))
  
  ;; this is required on compiler
  (define-c-proc vm-execute! (cb::<code-builder>) Sg_VMExecute)


  ;; don't use this casually
  (define-c-proc acquire-global-lock! () ::<void> Sg_VMAcquireGlobalLock)
  (define-c-proc release-global-lock! () ::<void> Sg_VMReleaseGlobalLock)

  (define-c-proc vm-attach-stack-trace (c)
    (result (Sg_VMAttachStackTrace (Sg_VM) c TRUE)))

  ;; debug
  (define-c-proc vm-log-port (vm::<thread> :optional p::<port>)
    (if (SG_UNBOUNDP p)
	(result (-> vm logPort))
	(begin
	  (unless (SG_OUTPUT_PORTP p)
	    (wrong-type-of-argument-violation 'vm-log-port "output port" p))
	  (set! (-> vm logPort) p)
	  (result SG_UNDEF))))
)
