;; -*- mode: scheme; coding: utf-8 -*-
#!read-macro=sagittarius/regex
(import (rnrs)
	(rnrs eval)
	(getopt)
	(sagittarius document)
	(sagittarius document format html)
	(sagittarius regex)
	(srfi :1 lists)
	(srfi :13 strings)	
	(srfi :19 time)
	(srfi :39 parameters)
	(srfi :117 list-queues)
	(text sxml sxpath)
	(text sxml tools)
	(util file)
	(pp))

(define *output-directory* (make-parameter #f))
(define *output-file* (make-parameter #f))

(define generated-filenames (list-queue))

(define (ensure-directory file)
  (let-values (((dir file ext) (decompose-path file)))
    (create-directory* dir)))

(define (level->filename title-node level subdir)
  (define title (and title-node (car (sxml:content title-node))))
  (define (->filename title-node level ext)
    (define (tag->filename tag) (string-append tag "." ext))
    (cond ((sxml:attr title-node 'tag) => tag->filename)
	  (else 
	   (string-append "section"
			  (string-join
			   (map number->string (reverse level))
			   "") (string-append "." ext)))))
  (let-values (((dir file ext) (decompose-path (*output-file*))))
    (define file (->filename title-node level ext))
    (define (real-file dir)
      (define relative (if subdir (build-path subdir file) file))
      (define out-file (build-path* dir "sections" file))
      (ensure-directory out-file)
      (when (file-exists? out-file) (delete-file out-file))
      (make-document-link title out-file (string-append "./" relative)))
    (define (stdout)
      (make-document-link title (current-output-port)
			  (string-append "./" file)))
    (when (member file (list-queue-list generated-filenames))
      (assertion-violation 'level->filename
			   (string-append "Duplicate filename on " title)
			   file))
    (list-queue-add-front! generated-filenames file)
    (cond ((*output-directory*) => real-file)
	  (else (stdout)))))

(define author
  `(section (@ (id "author"))
	    (thematic-break)
	    (paragraph (@ (class "author footer"))
	     "This document was generated by "
	     (italic "Takashi Kato")
	     " with Sagittarius gendoc."
	     (linebreak)
	     "Generated date: "
	     (italic ,(date->string (current-date) "~4")))))

(define ((populate-elements level) document navi out)
  (define (navigation prev next)
    ;; I'm too lazy to do this *properly*
    (define (drop-duplicate-segment s) (regex-replace-first #/sections\// s ""))
    (define (->link link class)
      `((link (@ (class ,class)
		 (href ,(drop-duplicate-segment (document-link-relative link))))
	      ,(document-link-text link))))
    (define dummy '((code " "))) ;; dummy
    `((paragraph (@ (class "navigation-container"))
		,@(if prev (->link prev "navi prev") dummy)
		(link (@ (class "navi top")
			 (href ,(string-append "../" (*output-file*))))
		      "Top")
		,@(if next (->link next "navi next") dummy))))
  (define (add-navigation document navi)
    (define prev (document-navigation-prev navi))
    (define next (document-navigation-next navi))
    (define content (document:content document))
    (let ((c (sxml:content content))
	  (n (navigation prev next)))
      (sxml:change-content! content (append n c n))
      (document:change-content document content)))
  (define (add-author document)
    (define content (document:content document))
    (let ((c (sxml:content content)))
      (sxml:change-content! content (append c (list author)))
      (document:change-content document content)))
  (add-author (if navi (add-navigation document navi) document)))

(define (attribute-resolver options marker)
  (case marker
    ((define) '((class "define")))
    ((block-container) '((class "codeblock")))
    ((snipet-container) '((class "snipet")))
    (else '())))
(define ((header-populator js style) options info)
  (define generated? (sxml:attr info 'generated))
  `((meta (@ (charset "utf-8")))
    (meta (@ (http-eqiv "Content-Type")
	     (content   "text/html; charset=utf-8")))
    ,@(if js
	  `((script (@ (type "text/javascript")
		       (src ,(if generated? (string-append "../" js) js)))
		    " "))
	  '())
    ,@(if style
	  `((link (@ (rel "stylesheet") (type "text/css")
		     (href ,(if generated?
				(string-append "../" style)
				style)))))
	  '())))

(define (index-table-resolver document)
  (define default (make-default-index-table-resolver
		   (lambda (marker) (attribute-resolver #f marker))))
  (define header-path (sxpath "//header"))
  (define (tag&letter header)
    (cons (sxml:attr header 'tag) (car (sxml:content header))))
  (define (->link tag&letter)
    `((link (@ (href ,(string-append "#" (car tag&letter))))
	    (@@ (noupdate #t))
	    ,(cdr tag&letter)) " "))
  (let* ((index-table (default document))
	 (tag&letters (map tag&letter (header-path `(*TOP* ,index-table)))))
    `(paragraph (@ (id "index-table"))
	(paragraph (@ (id "index-letters")) ,@(append-map ->link tag&letters))
	,index-table)))

(define (make-table-of-contents-resolver depth)
  (define resolver (make-default-table-of-contents-resolver depth))
  (lambda (document)
    (let ((toc (resolver document)))
      toc)))

(define (make-output-options javascript style separate)
  (define (splitter title level accept stop)
    (if (< (length level) separate)
	(let ((link (level->filename title level "sections")))
	  (print "Section " title (reverse level) " -> "
		 (document-link-absolute link))
	  (accept link (populate-elements level) values))
	(let ((link (level->filename title level #f)))
	  (print "Section " title (reverse level) " -> "
		 (document-link-absolute link))
	  (stop link (populate-elements level) values))))
  (html-output-options-builder
   (default-codeblock-language "scheme")
   (eval-executor (make-default-eval-resolver (environment '(sagittarius))))
   (index-table-resolver index-table-resolver)
   (table-of-contents-resolver
    (make-table-of-contents-resolver (if separate 1 2)))
   (author-resolver (if separate (lambda (_) "") (lambda (document) author)))
   (section-splitter (and separate splitter))
   (default-title "Sagittarius Users' Reference")
   ;; TOOD
   (header-populator (header-populator javascript style))
   (attribute-resolver attribute-resolver)))

(define (document-input:deep-expand depth parser file options)
  (define (compose-example file)
    (define (strip-license line) (not (string-prefix? ";;;" line)))
    (let ((lines (filter strip-license (file->string-list file))))
      ;; now add codeblock
      (let-values (((out e) (open-string-output-port)))
	(put-string out "```scheme") (newline out)
	(for-each (lambda (line) (put-string out line) (newline out)) lines)
	(put-string out "```") (newline out)
	(port->document-input (open-string-input-port (e)) file #t))))
  (do ((i 0 (+ i 1))) ((= i depth)) (display "  "))
  (print " - " file)
  (let-values (((dir ignore ext) (decompose-path (absolute-path file))))
    (let ((input (if (string=? ext "scm")
		     (compose-example file)
		     (file->document-input file))))
      (parameterize ((current-directory dir))
	(parser input options)))))

(define input-options
  (document-input-options-builder
   (include-expander document-input:deep-expand)))

(define (usage)
  (print "gendoc [OPTIONS] file"))

(define (check-older output)
  (unless (or (port? output) (not (file-exists? output)))
    (let ((files (glob "**/*.md"))
	  (doc-mtime (file-stat-mtime output)))
      (when (for-all (lambda (file) (< (file-stat-mtime file) doc-mtime)) files)
	(print "Document is not changed. " output)
	(exit 0)))))

(define (get-directory output)
  (and (string? output)
       (let-values (((dir file ext) (decompose-path output)))
	 dir)))
(define (get-file output)
  (and (string? output)
       (let-values (((dir file ext) (decompose-path output)))
	 (string-append file "." ext))))
(import (sagittarius document format markdown))
(define (main args)
  (with-args args
      ((output     (#\o "output") #t (current-output-port))
       (style  	   (#\s "style") #t #f)
       (javascript (#\j "javascript") #t #f)
       (separate   (#\p "separate") #t #f)
       (lang       (#\l "lang") #t "en")
       (format     (#\f "format") #t "html")
       . files)
    (unless (file-exists? (cadr files))
      (usage)
      (exit -1))
    (check-older output)
    (when (and (not (port? output)) (file-exists? output)) (delete-file output))
    (let ((in-file (cadr files)))
      (parameterize ((*output-directory* (get-directory output))
		     (*output-file* (get-file output)))
	(let ((options (make-output-options
			javascript
			style
			(and separate (string->number separate))))
	      (doc (call-with-input-file in-file
		     (lambda (in)
		       (parameterize ((current-directory
				       (or (get-directory in-file)
					   ;; sort of pwd :)
					   (current-directory))))
			 (port->document 'markdown in input-options)))))
	      (fmt (string->symbol format)))
	  (if (port? output)
	      (write-document fmt doc options output)
	      (call-with-output-file output
		(lambda (out) (write-document fmt doc options out)))))))))

