# Sagittarius extensions -*- CMake -*-
# 
INCLUDE_DIRECTORIES(${SAGITTARIUS_INCLUDE_DIR})

IF (CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL CMAKE_SYSTEM_PROCESSOR
    AND CMAKE_HOST_SYSTEM_NAME STREQUAL CMAKE_SYSTEM_NAME)
  SET(HOST_SASH $<TARGET_FILE:sash>)
ELSE()
  # USE the one on the path
  SET(HOST_SASH ${REAL_SASH_NAME})
ENDIF()

MESSAGE(STATUS "Stub generator ${HOST_SASH}")

SET(GENSTUB
  ${GENSTUB}
  ${HOST_SASH}
  -L${CMAKE_CURRENT_SOURCE_DIR}/../lib
  -L${CMAKE_CURRENT_SOURCE_DIR}/../sitelib
  ${CMAKE_CURRENT_SOURCE_DIR}/genstub)

IF(${LINK_BOEHM_GC})
  # temporary solution for VC
  IF(MSVC)
    ADD_DEFINITIONS(-DGC_NOT_DLL)
  ENDIF()
ENDIF()

IF(WIN32 OR POSIX_EMULATOR OR MINGW OR WINDOWS_SUPPORT)
  SET(USE_CPP_FOR_BROKEN_LINKER TRUE)
ENDIF()

INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/addstub.cmake
  DESTINATION "${SAGITTARIUS_CURRENT_SHARE}/cmake")

# testing preparetion
IF (NOT EXISTS ${PROJECT_BINARY_DIR}/ext)
  FILE(COPY ${PROJECT_SOURCE_DIR}/ext/all-tests.scm
    DESTINATION ${PROJECT_BINARY_DIR}/ext/)
ENDIF()

# make dummy resource file
SET(EXT_TEST_RESOURCE_FILE "${PROJECT_BINARY_DIR}/ext/.sagittarius-exttestrc")
FILE(WRITE ${EXT_TEST_RESOURCE_FILE} "${CMAKE_CURRENT_SOURCE_DIR}\n")

# Inter module options...
IF(POSIX_EMULATOR)
  OPTION(USE_SCHANNEL "Using SChannel instead of OpenSSL" OFF)
ENDIF()

IF(WIN32 OR USE_SCHANNEL)
  SET(CRYPTO_LIBS crypt32 secur32 ncrypt)
ELSE()
  CHECK_INCLUDE_FILE(openssl/ssl.h HAVE_OPENSSL_H)
  FIND_PACKAGE(PkgConfig)
  PKG_CHECK_MODULES(PC_OPENSSL openssl)
  MESSAGE(STATUS "OpenSSL lib dir ${PC_OPENSSL_LIBDIR}")

  FIND_LIBRARY(SSL_LIBRARIES NAMES ssl
    HINTS ${PC_OPENSSL_LIBDIR} ${PC_OPENSSL_LIBRARY_DIRS})
  MESSAGE(STATUS "OpenSSL ssl lib: ${SSL_LIBRARIES}")

  FIND_LIBRARY(CRYPTO_LIBRARIES NAMES crypto
    HINTS ${PC_OPENSSL_LIBDIR} ${PC_OPENSSL_LIBRARY_DIRS})
  MESSAGE(STATUS "OpenSSL crypto lib: ${CRYPTO_LIBRARIES}")

  IF (HAVE_OPENSSL_H)
    SET(CRYPTO_LIBS ${SSL_LIBRARIES} ${CRYPTO_LIBRARIES})
  ELSEIF(APPLE)
    MESSAGE(STATUS "Trying to use homebrew version of OpenSSL")
    EXECUTE_PROCESS(COMMAND brew --prefix openssl
      OUTPUT_VARIABLE HOMWBREW_OPENSSL_DIR)
    STRING(STRIP ${HOMWBREW_OPENSSL_DIR} HOMWBREW_OPENSSL_DIR)
    MESSAGE(STATUS "Homebrew OpenSSL directory ${HOMWBREW_OPENSSL_DIR}")
    
    SET(HOMEBREW_OPENSSL_INCDIR ${HOMWBREW_OPENSSL_DIR}/include)
    SET(HOMEBREW_OPENSSL_LIBDIR ${HOMWBREW_OPENSSL_DIR}/lib)
    
    FIND_FILE(HAVE_HOMEBREW_OPENSSL_H openssl/ssl.h
      PATHS ${HOMEBREW_OPENSSL_INCDIR}
      HINTS ${HOMEBREW_OPENSSL_INCDIR})
    
    FIND_LIBRARY(HOMEBREW_SSL_LIBRARIES NAMES ssl
      HINTS ${HOMEBREW_OPENSSL_LIBDIR})
    MESSAGE(STATUS "Homebrew OpenSSL ssl lib: ${HOMEBREW_SSL_LIBRARIES}")
    FIND_LIBRARY(HOMEBREW_CRYPTO_LIBRARIES NAMES crypto
      HINTS ${HOMEBREW_OPENSSL_LIBDIR})
    MESSAGE(STATUS "Homebrew OpenSSL crypto lib: ${HOMEBREW_CRYPTO_LIBRARIES}")
    
    IF (HAVE_HOMEBREW_OPENSSL_H)
      # TODO should we?
      INCLUDE_DIRECTORIES(${HOMEBREW_OPENSSL_INCDIR})
      SET(CRYPTO_LIBS ${HOMEBREW_SSL_LIBRARIES} ${HOMEBREW_CRYPTO_LIBRARIES})
    ELSE()
      MESSAGE(FATAL_ERROR "No SSL provider found. Please install OpenSSL")
    ENDIF()
    # reset
    SET(CMAKE_REQUIRED_INCLUDES ${tmp})
  ELSEIF (POSIX_EMULATOR)
    MESSAGE(STATUS "OpenSSL is not found, using SChannel.")
    MESSAGE(WARNING "On this platform, it's better to use OpenSSL, please consider to instsall it
")
    SET(CRYPTO_LIBS crypt32 secur32 ncrypt)
    SET(USE_SCHANNEL ON)
  ELSE()
    MESSAGE(FATAL_ERROR "No SSL provider found. Please install OpenSSL")
  ENDIF()

  # Mainly to avoid macOS Catalina dummy libssl issue but we can use static
  # link if it's there anyway
  SET(SAVE ${CMAKE_REQUIRED_LIBRARIES})
  SET(CMAKE_REQUIRED_LIBRARIES ${CRYPTO_LIBS})
  CHECK_FUNCTION_EXISTS(SSL_set_alpn_protos HAVE_SSL_SET_ALPN_PROTOS)
  SET(CMAKE_REQUIRED_LIBRARIES ${SAVE})
  IF (HAVE_SSL_SET_ALPN_PROTOS)
    ADD_DEFINITIONS("-DHAVE_SSL_SET_ALPN_PROTOS")
  ENDIF()
ENDIF()

SET(EXT_WORKAROUND
  "(define build-directory-path \"${PROJECT_BINARY_DIR}/build\")")
SET(EXT_TEST_COMMAND
  ${TEST_COMMAND}
  -e ${EXT_WORKAROUND}
  "${PROJECT_SOURCE_DIR}/test/runner.scm")

INCLUDE(CTest)

ADD_SUBDIRECTORY(atomic atomic)
ADD_SUBDIRECTORY(zlib zlib)
ADD_SUBDIRECTORY(threads threads)
ADD_SUBDIRECTORY(time time)
ADD_SUBDIRECTORY(socket socket)
#ADD_SUBDIRECTORY(regex regex)
ADD_TEST(NAME regex
  COMMAND ${EXT_TEST_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}/regex/test.scm
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/ext)

# for now we don't support ffi on BB10
IF (NOT ${SAGITTARIUS_OS} STREQUAL "qnx")
  ADD_SUBDIRECTORY(ffi ffi)
ENDIF()
ADD_SUBDIRECTORY(process process)
ADD_SUBDIRECTORY(crypto crypto)
ADD_SUBDIRECTORY(odbc odbc)
ADD_SUBDIRECTORY(termios termios)
ADD_SUBDIRECTORY(filewatch filewatch)
