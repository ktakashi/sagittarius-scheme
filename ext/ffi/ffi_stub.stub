;; -*- mode: scheme; coding: utf-8; -*-
#!compatible
(decl-code
 (.include <sagittarius.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   <sagittarius-ffi.h>
	   <string.h>))

(define-type <pointer> "SgPointer*")
(define-type <callback> "SgCallback*")
(define-type <func-info> "SgFuncInfo*")
(define-type <cstruct> "SgCStruct*")

(define-cise-stmt check-null-pointer
  ((_ who p)
   `(unless (-> ,p pointer)
      (Sg_AssertionViolation ',who (SG_MAKE_STRING "got null pointer") '()))))

(define-c-proc open-shared-library 
  (file::<string> :optional (raise::<boolean> #f)) 
  (let ((p::void* (Sg_OpenSharedObject file)))
    (when (and raise (== p NULL)) (Sg_Error (UC "%A") (Sg_GetSharedError)))
    (result (Sg_MakePointer p))))

(define-c-proc lookup-shared-library (handle::<pointer> symbol::<string>) 
  (result (Sg_MakePointer (Sg_LookupSharedObject (cast void* 
						       (-> handle pointer))
						 (Sg_Utf32sToUtf8s symbol)))))

(define-c-proc close-shared-library (handle::<pointer>) ::<void>
  (Sg_CloseSharedObject (cast void* (-> handle pointer))))

;;; make my life easier, shared object suffix
"static SgObject SH_SUFFIX = NULL;"
(define-c-proc shared-object-suffix () 
  (when (== SH_SUFFIX NULL)
    (set! SH_SUFFIX (SG_MAKE_STRING SHLIB_SO_SUFFIX)))
  (result SH_SUFFIX))

(define-c-proc create-function-info 
  (handle::<pointer> name rettype::<fixnum> sigs::<string> sret sparam)
  Sg_CreateCFunction)

(define-c-proc create-c-callback
  (rettype::<fixnum> sigs::<string> proc::<procedure>) 
  Sg_CreateCallback)

(define-c-proc free-c-callback (callback::<callback>) ::<void>
  Sg_ReleaseCallback)

(define-c-proc callback? (obj) ::<boolean> :constant SG_CALLBACKP)

;; malloc
(define-c-proc c-malloc (size::<fixnum>) Sg_CMalloc)

(define-c-proc c-free (p::<pointer>) ::<void> Sg_CFree)

;; memcpy
(define-c-proc c-memcpy (d::<pointer> o::<fixnum> s st::<fixnum> si::<fixnum>)
  ::<void> Sg_CMemcpy)

;; finalizer
(define-c-proc register-ffi-finalizer (p::<pointer> proc::<procedure>)
  Sg_RegisterFFIFinalizer)
(define-c-proc unregister-ffi-finalizer (p::<pointer>) 
  Sg_UnregisterFFIFinalizer)

;; pointer
(define-c-proc pointer? (o) ::<boolean> :constant SG_POINTERP)

(define-c-proc integer->pointer (n::<integer>) :no-side-effect
  (let ((r (Sg_MakePointer NULL)))
    (.if "SIZEOF_VOIDP == 4"
	 (set! (-> (SG_POINTER r) pointer) (cast uintptr_t (Sg_GetInteger n)))
	 (set! (-> (SG_POINTER r) pointer) 
	       (cast uintptr_t (Sg_GetIntegerS64Clamp n SG_CLAMP_BOTH NULL))))
    (result r)))
(define-c-proc uinteger->pointer (n::<integer>) :no-side-effect
  (when (Sg_NegativeP n)
    (Sg_AssertionViolation 'uinteger->pointer
			   (SG_MAKE_STRING "non negative integer")
			   (SG_LIST1 n)))
  (let ((r (Sg_MakePointer NULL)))
    (.if "SIZEOF_VOIDP == 4"
	 (set! (-> (SG_POINTER r) pointer) (cast uintptr_t (Sg_GetUInteger n)))
	 (set! (-> (SG_POINTER r) pointer) 
	       (cast uintptr_t (Sg_GetIntegerU64Clamp n SG_CLAMP_BOTH NULL))))
    (result r)))

(define-c-proc pointer->integer (p::<pointer> :optional (bits::<fixnum> -1))
  :no-side-effect Sg_PointerToInteger)
(define-c-proc pointer->uinteger (p::<pointer> :optional (bits::<fixnum> -1))
  :no-side-effect Sg_PointerToUInteger)

;; !!!dangerous operations!!!
;; the usecase is for callback parameters or so
(define-c-proc object->pointer (o) :no-side-effect
  (result (Sg_MakePointer (cast void* o))))
(define-c-proc pointer->object (p::<pointer>) :no-side-effect
  (result (SG_OBJ (-> p pointer))))

;; we can't determine the size of given pointer
;; so trust the user.
(define-c-proc %pointer->bytevector 
  (p::<pointer> size::<fixnum> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer->bytevector p)
  (result (Sg_MakeByteVectorFromU8Array
	   (cast (const uint8_t*)
		 (& (pointer (cast void** (+ (-> p pointer) offset)))))
	   size)))
(define-c-proc %bytevector->pointer 
  (bv::<bytevector> offset::<fixnum>)
  :no-side-effect
  (unless (SG_BVECTOR_IS_VALID_INDEX bv offset)
    (Sg_AssertionViolation 'bytevector->pointer
			   (SG_MAKE_STRING "offset out of range")
			   (SG_LIST2 bv (SG_MAKE_INT offset))))
  (result (Sg_MakePointer
	   (& (pointer (cast void** (+ (cast uintptr_t (SG_BVECTOR_ELEMENTS bv))
				       offset)))))))

(decl-code
 (.typedef "char*" "char_ptr")
 (.typedef "void*" "void_ptr"))
(define-c-proc allocate-pointer (size::<fixnum> :optional (fill::<fixnum> 0))
  (let ((p::char* (SG_NEW_ATOMIC2 char_ptr size)))
    (memset p fill size)
    (result (Sg_MakePointer p))))

;; struct
(define-c-proc create-c-struct (name::<symbol> layouts alignment::<fixnum>)
  Sg_CreateCStruct)

(define-c-proc c-struct? (obj) ::<boolean> :constant SG_CSTRUCTP)

;; allocates c-struct with GC
(define-c-proc allocate-c-struct (st::<cstruct>) 
  ;; allocates byte
  (let ((p::char* (SG_NEW2 char_ptr (ref (-> st type) size))))
    (memset p 0 (ref (-> st type) size))
    (result (Sg_MakePointer p))))

(define-c-proc describe-c-struct
  (st::<cstruct> :optional (p (Sg_CurrentOutputPort))) ::<void>
  Sg_DescCStruct)

(define-c-proc size-of-c-struct (st::<cstruct>)
  (.if "SIZEOF_SIZE_T == 8"
       (result (Sg_MakeIntegerFromU64 (ref (-> st type) size)))
       (result (SG_MAKE_INT (ref (-> st type) size)))))

(define-c-proc c-struct-ref (p::<pointer> st::<cstruct> name::<symbol>)
  :no-side-effect
  (check-null-pointer c-struct-ref p)
  (result (Sg_CStructRef p st name)))

(define-c-proc c-struct-set! 
  (p::<pointer> st::<cstruct> name::<symbol> v) ::<void>
  (check-null-pointer c-struct-set! p)
  (Sg_CStructSet p st name v))

;; ref
(define-c-proc pointer-ref-c-uint8 (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-uint8 p)
  (result (POINTER_REF uint8_t p offset)))

(define-c-proc pointer-ref-c-int8 (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-int8 p)
  (result (POINTER_REF int8_t p offset)))

(define-c-proc pointer-ref-c-uint16 (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-uint16 p)
  (result (POINTER_REF uint16_t p offset)))

(define-c-proc pointer-ref-c-int16 (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-int16 p)
  (result (POINTER_REF int16_t p offset)))

(define-c-proc pointer-ref-c-uint32 (p::<pointer> offset::<fixnum>) 
  :no-side-effect
  (check-null-pointer pointer-ref-c-uint32 p)
  (result (Sg_MakeIntegerU (POINTER_REF uint32_t p offset))))

(define-c-proc pointer-ref-c-int32 (p::<pointer> offset::<fixnum>) 
  :no-side-effect
  (check-null-pointer pointer-ref-c-int32 p)
  (result (Sg_MakeInteger (POINTER_REF int32_t p offset))))

(define-c-proc pointer-ref-c-uint64 (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-uint64 p)
  (result (Sg_MakeIntegerFromU64 (POINTER_REF uint64_t p offset))))

(define-c-proc pointer-ref-c-int64 (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-int64 p)
  (result (Sg_MakeIntegerFromS64 (POINTER_REF int64_t p offset))))

(define-c-proc pointer-ref-c-pointer (p::<pointer> offset::<fixnum>) 
  :no-side-effect
  (check-null-pointer pointer-ref-c-pointer p)
  (result (Sg_MakePointer (POINTER_REF void_ptr p offset))))

(define-c-proc pointer-address (p::<pointer> :optional (offset::<fixnum> 0))
  :no-side-effect
  (if offset
      (result (Sg_MakePointer 
	       (& (pointer (cast void** (+ (-> p pointer) offset))))))
      (result (Sg_MakePointer (& (-> p pointer))))))

;; to use POINTER_REF macro.
(decl-code
 ;; to avoid cise's bug...
 (.typedef "char"           "cchar")
 (.typedef "short"          "cshort")
 (.typedef "int"            "cint")
 (.typedef "long"           "clong")
 (.typedef "float"          "cfloat")
 (.typedef "double"         "cdouble")

 (.typedef "unsigned char"  "uchar")
 (.typedef "unsigned short" "ushort")
 (.typedef "unsigned int"   "uint")
 (.typedef "unsigned long"  "ulong")
 (.typedef "unsigned long long"  "ulonglong")
 (.typedef "long long"           "longlong"))

(define-c-proc pointer-ref-c-unsigned-char (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-unsigned-char p)
  (result (POINTER_REF uchar p offset)))

;; TODO should we return character or integer for char and wchar_t?
(define-c-proc pointer-ref-c-char (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-char p)
  (result (POINTER_REF cchar p offset)))

(define-c-proc pointer-ref-c-wchar (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-pointer p)
  (result (Sg_MakeIntegerU (POINTER_REF wchar_t p offset))))

(define-c-proc pointer-ref-c-unsigned-short (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-unsigned-short p)
  (result (POINTER_REF ushort p offset)))

(define-c-proc pointer-ref-c-short (p::<pointer> offset::<fixnum>)
  ::<fixnum> :no-side-effect
  (check-null-pointer pointer-ref-c-short p)
  (result (POINTER_REF cshort p offset)))

(define-c-proc pointer-ref-c-unsigned-int (p::<pointer> offset::<fixnum>) 
  :no-side-effect
  (check-null-pointer pointer-ref-c-unsigned-int p)
  (result (Sg_MakeIntegerU (POINTER_REF uint p offset))))

(define-c-proc pointer-ref-c-int (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-int p)
  (result (Sg_MakeInteger (POINTER_REF cint p offset))))

(define-c-proc pointer-ref-c-unsigned-long (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-unsigned-long p)
  (result (Sg_MakeIntegerU (POINTER_REF ulong p offset))))

(define-c-proc pointer-ref-c-long (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-long p)
  (result (Sg_MakeInteger (POINTER_REF clong p offset))))

(define-c-proc pointer-ref-c-intptr (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-intptr p)
  (.if "SIZEOF_VOIDP == 4"
       (result (Sg_MakeInteger (POINTER_REF intptr_t p offset)))
       (result (Sg_MakeIntegerFromS64 (POINTER_REF intptr_t p offset)))))

(define-c-proc pointer-ref-c-uintptr (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-uintptr p)
  (.if "SIZEOF_VOIDP == 4"
       (result (Sg_MakeIntegerU (POINTER_REF uintptr_t p offset)))
       (result (Sg_MakeIntegerFromU64 (POINTER_REF uintptr_t p offset)))))

;; correct?
;; Do we even need to support long long?
(define-c-proc pointer-ref-c-unsigned-long-long (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-unsigned-long-long p)
  (result (Sg_MakeIntegerFromU64 (POINTER_REF ulonglong p offset))))

(define-c-proc pointer-ref-c-long-long (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-long-long p)
  (result (Sg_MakeIntegerFromS64 (POINTER_REF longlong p offset))))

(define-c-proc pointer-ref-c-float (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-float p)
  (result (Sg_MakeFlonum (cast double (POINTER_REF cfloat p offset)))))

(define-c-proc pointer-ref-c-double (p::<pointer> offset::<fixnum>)
  :no-side-effect
  (check-null-pointer pointer-ref-c-double p)
  (result (Sg_MakeFlonum (POINTER_REF cdouble p offset))))

;; set!
(define-c-proc pointer-set-c-uint8! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT8_T value))

(define-c-proc pointer-set-c-int8! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT8_T value))

(define-c-proc pointer-set-c-uint16! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT16_T value))

(define-c-proc pointer-set-c-int16! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT16_T value))

(define-c-proc pointer-set-c-uint32! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT32_T value))

(define-c-proc pointer-set-c-int32! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT32_T value))

(define-c-proc pointer-set-c-uint64! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT64_T value))

(define-c-proc pointer-set-c-int64! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT64_T value))

(define-c-proc pointer-set-c-unsigned-char! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT8_T value))

(define-c-proc pointer-set-c-char! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT8_T value))

(define-c-proc pointer-set-c-unsigned-short! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_USHORT value))

(define-c-proc pointer-set-c-short! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_SHORT value))

(define-c-proc pointer-set-c-unsigned-int! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT value))

(define-c-proc pointer-set-c-int! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT value))

(define-c-proc pointer-set-c-unsigned-long! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_ULONG value))

(define-c-proc pointer-set-c-long! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_LONG value))

(define-c-proc pointer-set-c-intptr! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INTPTR value))

(define-c-proc pointer-set-c-uintptr! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINTPTR value))

;; correct?
;; Do we even need to support long long?
(define-c-proc pointer-set-c-unsigned-long-long! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT64_T value))

(define-c-proc pointer-set-c-long-long! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_INT64_T value))

(define-c-proc pointer-set-c-float! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_FLOAT value))

(define-c-proc pointer-set-c-double! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_DOUBLE value))

(define-c-proc pointer-set-c-wchar! (p::<pointer> offset::<fixnum> value) ::<void>
  (.if "SIZEOF_WCHAR_T == 2"
       (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT16_T value)
       (Sg_PointerSet p offset FFI_RETURN_TYPE_UINT32_T value)))

(define-c-proc pointer-set-c-pointer! (p::<pointer> offset::<fixnum> value) ::<void>
  (Sg_PointerSet p offset FFI_RETURN_TYPE_POINTER value))

(define-c-proc %ffi-proc-name! (proc::<procedure> name)
  (set! (SG_PROCEDURE_NAME proc) name)
  (result proc))
  
