/* -*- mode: c; coding: utf-8; -*-  */
/*
  Unix socket for Linux, *BSD and macOS
  This is used only for signaling socket selector in a, relatively, safe way.
 */

#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>

static int unix_socket()
{
  return socket(PF_UNIX, SOCK_DGRAM, 0);
}

static struct sockaddr_un * bind_unix_socket(int socket,
					     struct sockaddr_un *addr)
{
  char tmp[] = "/tmp/socket-selector.XXXXXX";
  int fd = mkstemp(tmp);
  if (fd == -1) return NULL;
  close(fd);	      /* we don't need file descriptor of temp file */
  addr->sun_family = AF_UNIX;
  snprintf(addr->sun_path, array_sizeof(tmp), "%s", tmp);
  /* mkstemp creates a file but we only need the name */
  if (unlink(addr->sun_path) != 0) {
    return NULL;
  }
  if (bind(socket, (struct sockaddr *)addr, sizeof(struct sockaddr_un)) != 0) {
    return NULL;
  }
  return addr;
}

static int sendto_unix_socket(int socket, struct sockaddr_un *addr,
			      const uint8_t *data, int datalen)
{
  struct sockaddr *sadr = (struct sockaddr *)addr;
  size_t s = sizeof(struct sockaddr_un);
  int rest = datalen;
  while (rest != 0) {
    int r = sendto(socket, data, rest, 0, sadr, s);
    if (r == rest) break;
    rest -= r;
    data += r;
  }
  return datalen;
}

static int recvfrom_unix_socket(int socket, struct sockaddr_un *addr,
				uint8_t *buffer, size_t buflen)
{
  socklen_t l = sizeof(struct sockaddr_un);
  return recvfrom(socket, buffer, buflen, 0, (struct sockaddr *)addr, &l);
}


typedef struct unix_context_rec
{
  int fd;			/* epoll or kqueue fd */
  int stop_fd;			/* unix domain socket fd */
  struct sockaddr_un addr;
} unix_context_t;

static void invalidate_stop(unix_context_t *stop)
{
  stop->stop_fd = -1;
}

static int is_stop_initialised(unix_context_t *stop)
{
  return stop->stop_fd != -1;
}

static unix_context_t * setup_stop(unix_context_t *stop)
{
  stop->stop_fd = unix_socket();
  if (stop->stop_fd == -1) return NULL;
  if (bind_unix_socket(stop->stop_fd, &stop->addr) == NULL) {
    close(stop->stop_fd);
    return NULL;
  }
  return stop;
}

static void close_unix_stop(unix_context_t *stop)
{
  close(stop->stop_fd);
  unlink(stop->addr.sun_path);
  invalidate_stop(stop);
}

static const char msg[] = "stop it!";
static void interrupt_unix_stop(unix_context_t *stop)
{
  sendto_unix_socket(stop->stop_fd, &stop->addr, (const uint8_t *)msg, array_sizeof(msg));
}

static void interrupted_unix_stop(unix_context_t *stop)
{
  uint8_t buf[array_sizeof(msg)];
  size_t rest = array_sizeof(msg);
  while (TRUE) {
    int r = recvfrom_unix_socket(stop->stop_fd, &stop->addr, buf, rest);
    if (r < 0) {
      /* something went wrong just ignore */
      break;
    }
    if (r == rest) break;
    rest -= r;
  }
}

static SgObject system_error(int e, int fd)
{
  char *msg = strerror(e);
  if (fd > 0) close(fd);
  Sg_SystemError(e, UC("socket-selector system error: %A"),
		 Sg_Utf8sToUtf32s(msg, strlen(msg)));
  return SG_UNDEF;		/* dummy */
}

static int make_selector();
static SgObject wait_selector(unix_context_t *ctx, int n,
			      SgObject sockets, struct timespec *timeout,
			      int *err);

#include "socket-selector.incl"

static void * make_selector_context()
{
  unix_context_t *ctx = SG_NEW(unix_context_t);
  if ((ctx->fd = make_selector()) < 0) goto err;
  if (setup_stop(ctx) == NULL) goto err;
  return ctx;

 err:
  system_error(errno, ctx->fd);
  return NULL;
}

void Sg_CloseSocketSelector(SgSocketSelector *selector)
{
  if (!Sg_SocketSelectorClosedP(selector)) {
    unix_context_t *ctx = (unix_context_t *)selector->context;
    selector->context = NULL;
    Sg_LockMutex(&selector->lock);
    Sg_UnlockMutex(&selector->lock);
    Sg_DestroyMutex(&selector->lock);
    close(ctx->fd);
    if (is_stop_initialised(ctx)) close_unix_stop(ctx);
    Sg_UnregisterFinalizer(selector);
  }
}


SgObject Sg_SocketSelectorInterrupt(SgSocketSelector *selector)
{
  unix_context_t *ctx;
  if (Sg_SocketSelectorClosedP(selector)) {
    Sg_Error(UC("Socket selector is closed: %A"), selector);
  }
  ctx = (unix_context_t *)selector->context;
  interrupt_unix_stop(ctx);
  return selector;
}

static SgObject selector_wait(SgSocketSelector *selector, SgObject sockets,
			      void *context, int n, struct timespec *sp)
{
  unix_context_t *ctx = (unix_context_t *)context;
  int err = 0;
  /* the socket is reverse order, so correct it  */
  SgObject r = wait_selector(ctx, n, sockets, sp, &err);
  if (SG_FALSEP(r)) {
    if (err == EBADF) {
      Sg_Error(UC("Socket selector is closed during waiting: %A"), selector);
    }
    return system_error(err, -1);
  }
  return r;
}
