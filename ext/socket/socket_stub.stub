;; -*- scheme -*-
#!compatible
(decl-code
 (.include <sagittarius.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   "sagittarius-socket.h"))

(define-cise-stmt check-string-or-false
  ((_ name o)
   `(unless (or (SG_STRINGP ,o)
		(SG_FALSEP ,o))
      (Sg_WrongTypeOfArgumentViolation ',name
				       (SG_MAKE_STRING "string or #f")
				       ,o
				       '()))))

(define-type <socket> "SgSocket*")
(define-type <addrinfo> "SgAddrinfo*")
(define-type <sockaddr> "SgSockaddr*")
(define-type <ip-address> "SgIpAddress*")
(define-type <socket-info> "SgSocketInfo*")
(define-type <fdset> "SgFdSet*")

(define-c-proc addrinfo? (o) ::<boolean> :constant SG_ADDRINFOP)
(define-c-proc make-addrinfo ()  Sg_MakeAddrinfo)
(define-c-proc get-addrinfo (node service :optional (hints::<addrinfo> #f))
  (check-string-or-false make-client-socket node)
  (check-string-or-false make-client-socket service)
  (if (SG_FALSEP hints)
      (result (Sg_GetAddrinfo node service NULL))
      (result (Sg_GetAddrinfo node service hints))))

(define-c-proc sockaddr? (o) ::<boolean> :constant SG_SOCKADDRP)

(define-c-proc make-socket (f::<ifixnum> t::<ifixnum> :optional (p::<ifixnum> 0))
  Sg_CreateSocket)
(define-c-proc socket-setsockopt!
  (socket::<socket> level::<ifixnum> name::<ifixnum> value) Sg_SocketSetopt)
(define-c-proc socket-getsockopt
  (socket::<socket> level::<ifixnum> name::<ifixnum> size::<ifixnum>)
  Sg_SocketGetopt)

(define-c-proc socket-connect! (socket::<socket> info::<addrinfo> :optional (timeout #f))
  Sg_SocketConnect)
(define-c-proc socket-bind! (socket::<socket> info::<addrinfo>) Sg_SocketBind)
(define-c-proc socket-listen! (socket::<socket> backlog::<ifixnum>)
  Sg_SocketListen)

;;; error message
(define-c-proc socket-error-message (socket::<socket>) :no-side-effect
  Sg_SocketErrorMessage)
(define-c-proc socket-last-error (socket::<socket>) ::<fixnum> :no-side-effect
  (result (-> socket lastError)))

(define-c-proc socket? (o) ::<boolean> :constant SG_SOCKETP)

;; socket ports
(define-c-proc socket-port (o::<socket> :optional (close?::<boolean> #t)) 
  Sg_MakeSocketPort)
(define-c-proc socket-input-port (o::<socket>)   Sg_MakeSocketInputPort)
(define-c-proc socket-output-port (o::<socket>)  Sg_MakeSocketOutputPort)

(define-c-proc shutdown-port (o::<port> how::<ifixnum>) ::<void> 
  (Sg_ShutdownPort o how))
(define-c-proc shutdown-output-port (o::<port>) ::<void> 
  (Sg_ShutdownPort o SHUT_WR))
(define-c-proc shutdown-input-port (o::<port>) ::<void> 
  (Sg_ShutdownPort o SHUT_RD))

(define-c-proc socket-accept (o::<socket>) Sg_SocketAccept)

(define-c-proc socket-send
  (o::<socket> bv::<bytevector> :optional (flags::<ifixnum> 0)) ::<fixnum>
  (result (Sg_SocketSend (SG_SOCKET o)
			 (SG_BVECTOR_ELEMENTS bv)
			 (SG_BVECTOR_SIZE bv)
			 flags)))

(define-c-proc socket-send/range
  (o::<socket> bv::<bytevector> 
   :optional (start::<fixnum> 0) (len::<fixnum> -1) (flags::<ifixnum> 0))
  ::<fixnum>
  (when (< len 0) (set! len (SG_BVECTOR_SIZE bv)))
  (when (< start 0)
    (Sg_AssertionViolation 'socket-send/range
			   (SG_MAKE_STRING "start must be non negative")
			   (SG_LIST4 o bv
				     (SG_MAKE_INT start)
				     (SG_MAKE_INT len))))
  (when (< (- (SG_BVECTOR_SIZE bv) start) len)
    (Sg_AssertionViolation 'socket-send/range
			   (SG_MAKE_STRING "Specified length is too big")
			   (SG_LIST4 o bv
				     (SG_MAKE_INT start)
				     (SG_MAKE_INT len))))
  (result (Sg_SocketSend (SG_SOCKET o)
			 (+ (SG_BVECTOR_ELEMENTS bv) start) len flags)))

(define-c-proc socket-sendto
  (o::<socket> bv::<bytevector> addr::<sockaddr> :optional (flags::<ifixnum> 0))
  ::<fixnum>
  (result (Sg_SocketSendTo (SG_SOCKET o)
			   (SG_BVECTOR_ELEMENTS bv)
			   (SG_BVECTOR_SIZE bv)
			   flags
			   addr)))

(define-c-proc socket-sendto/range
  (o::<socket> bv::<bytevector> addr::<sockaddr> 
   :optional (start::<fixnum> 0) (len::<fixnum> -1) (flags::<ifixnum> 0))
  ::<fixnum>
  (when (< len 0) (set! len (SG_BVECTOR_SIZE bv)))
  (when (< start 0)
    (Sg_AssertionViolation 'socket-sendto/range
			   (SG_MAKE_STRING "start must be non negative")
			   (SG_LIST4 o bv
				     (SG_MAKE_INT start)
				     (SG_MAKE_INT len))))
  (when (< (- (SG_BVECTOR_SIZE bv) start) len)
    (Sg_AssertionViolation 'socket-sendto/range
			   (SG_MAKE_STRING "Specified length is too big")
			   (SG_LIST4 o bv
				     (SG_MAKE_INT start)
				     (SG_MAKE_INT len))))
  (result (Sg_SocketSendTo (SG_SOCKET o)
			   (+ (SG_BVECTOR_ELEMENTS bv) start)
			   len flags addr)))

(define-c-proc %socket-recv (o::<socket> len::<fixnum>
					:optional (flags::<ifixnum> 0)) 
  (let ((data (Sg_MakeByteVector len 0))
	(res::long (Sg_SocketReceive (SG_SOCKET o)
				     (SG_BVECTOR_ELEMENTS data) len flags)))
    (cond ((== len res) (result data))
	  ((< res 0)
	   ;; most probably socket is non-blocking
	   (result #f))
	  (else
	   ;; shrink
	   (let ((r (Sg_MakeByteVector res 0)))
	     (Sg_ByteVectorCopyX (SG_BVECTOR data) 0 (SG_BVECTOR r) 0 res)
	     (result r))))))

;; destructive
(define-c-proc %socket-recv! 
  (o::<socket> bv::<bytevector> start::<fixnum> len::<fixnum>
	       :optional (flags::<ifixnum> 0)) ::<fixnum>
  ;; sanity check
  (when (or (< start 0) (> len (- (SG_BVECTOR_SIZE bv) start)))
    (Sg_AssertionViolation 'socket-recv! 
			   (SG_MAKE_STRING "out of range")
			   (SG_LIST4 o bv (SG_MAKE_INT start) 
				     (SG_MAKE_INT len))))
  (result (Sg_SocketReceive (SG_SOCKET o)
			    (+ (SG_BVECTOR_ELEMENTS bv) start)
			    len flags)))

(define-c-proc socket-recvfrom (o::<socket> len::<fixnum> addr::<sockaddr>
					    :optional (flags::<ifixnum> 0)) 
  (let ((data (Sg_MakeByteVector len 0))
	(res::long (Sg_SocketReceiveFrom (SG_SOCKET o)
					 (SG_BVECTOR_ELEMENTS data) len flags
					 addr)))
    (cond ((== len res) (result data))
	  ((< res 0)
	   ;; most probably socket is non-blocking
	   (result #f))
	  (else
	   ;; shrink
	   (let ((r (Sg_MakeByteVector res 0)))
	     (Sg_ByteVectorCopyX (SG_BVECTOR data) 0 (SG_BVECTOR r) 0 res)
	     (result r))))))

(define-c-proc socket-recvfrom! 
  (o::<socket> bv::<bytevector> start::<fixnum> len::<fixnum> addr::<sockaddr>
	       :optional (flags::<ifixnum> 0)) ::<fixnum>
  ;; sanity check
  (when (or (>= start (SG_BVECTOR_SIZE bv))
	    (> len (- (SG_BVECTOR_SIZE bv) start)))
    (Sg_AssertionViolation 'socket-recvfrom! 
			   (SG_MAKE_STRING "out of range")
			   (SG_LIST4 o bv (SG_MAKE_INT start) 
				     (SG_MAKE_INT len))))
  (result (Sg_SocketReceiveFrom (SG_SOCKET o)
				(+ (SG_BVECTOR_ELEMENTS bv) start)
				len flags addr)))

(define-c-proc socket-shutdown (o::<socket> how::<ifixnum>) ::<void>
  Sg_SocketShutdown)

(define-c-proc socket-close  (o::<socket>) ::<void> Sg_SocketClose)
(define-c-proc socket-closed?  (o::<socket>) ::<boolean>
  (result (not (Sg_SocketOpenP o))))

(define-c-proc socket-fd (o::<socket>) :no-side-effect
  (.if "defined(_WIN32) && SIZEOF_VOIDP == 8"
       (result (Sg_MakeIntegerFromS64 (-> o socket)))
       (result (SG_MAKE_INT (-> o socket)))))

(define-c-proc socket-node (o::<socket>) :no-side-effect
  (result (-> o node)))
(define-c-proc socket-service (o::<socket>) :no-side-effect
  (result (-> o service)))

(define-c-proc socket-nonblocking! (o::<socket>) ::<boolean>
  Sg_SocketNonblocking)
(define-c-proc socket-blocking! (o::<socket>) ::<boolean>
  Sg_SocketBlocking)
(define-c-proc nonblocking-socket? (o::<socket>) ::<boolean>
  (result (-> o nonblocking)))

(define-c-proc make-fdset () :no-side-effect Sg_MakeFdSet)
(define-c-proc fdset? (o) ::<boolean> :constant SG_FDSETP)
(define-c-proc sockets->fdset (sockets) :no-side-effect Sg_SocketsToFdSet)
(define-c-proc collect-sockets (fdset) :no-side-effect 
  (cond ((SG_FALSEP fdset) (result SG_NIL)) ;; interrupted?
	((SG_FDSETP fdset) (result (Sg_CopyList (-> (SG_FDSET fdset) sockets))))
	(else
	 (Sg_AssertionViolation 'collect-sockets
				(SG_MAKE_STRING "<fdset> required")
				(SG_LIST1 fdset)))))

(define-c-proc fdset-sockets (fdset::<fdset>) :no-side-effect 
  (result (Sg_CopyList (-> fdset sockets))))

(define-cise-stmt check-fd-range
  ((_ fd)
   (let ((fd_ (gensym)))
     ;; seems windows socket descriptor is not ordered or so
     ;; so just let it go.
     `(.if "!defined(_MSC_VER)"
	   (let ((,fd_ :: int ,fd))
	     (when (or (< ,fd_ 0) (>= ,fd_ FD_SETSIZE))
	       (Sg_Error 
		(UC "Socket descriptor value is out of range: (0 <= %d < %d)")
		,fd_ FD_SETSIZE)))))))

(define-c-proc fdset-set! (fdset::<fdset> socket::<socket> flag::<boolean>)
  ::<void>
  (let ((fd::int (cast int (-> socket socket))))
    (check-fd-range fd)
    (cond (flag (FD_SET fd (& (-> fdset fdset)))
		(set! (-> fdset sockets) (Sg_Cons socket (-> fdset sockets)))
		(when (< (-> fdset maxfd) fd) (set! (-> fdset maxfd) fd)))
	  (else (FD_CLR fd (& (-> fdset fdset)))
		(let ((p SG_FALSE)
		      (h (-> fdset sockets)))
		  (for (() (not (SG_NULLP h)) (set! p h h (SG_CDR h)))
		       (when (SG_EQ (SG_CAR h) socket)
			 (if (SG_FALSEP p)
			     (set! (-> fdset sockets) (SG_CDR h))
			     (SG_SET_CDR p (SG_CDR h)))
			 (break))))
		(when (== (-> fdset maxfd) fd)
		  (let ((i::int (- (-> fdset maxfd) 1)))
		    (for (() (>= i 0) (post-- i))
			 (when (FD_ISSET i (& (-> fdset fdset))) (break)))
		    (set! (-> fdset maxfd) i)))))))

(define-c-proc fdset-ref (fdset::<fdset> socket::<socket>) ::<boolean>
  (setter fdset-set!)
  (let ((fd::int (cast int (-> socket socket))))
    (if (< fd 0)
	(result FALSE) ;; invalid or closed socket so never be set
	(begin (check-fd-range fd) 
	       (result (FD_ISSET fd (& (-> fdset fdset))))))))

(define-c-proc fdset-clear! (fdset::<fdset>) ::<void>
  (set! (-> fdset sockets) '())
  (FD_ZERO (& (-> fdset fdset))))


(define-c-proc socket-select (reads writes errors timeval) Sg_SocketSelect)
(define-c-proc socket-select! (reads writes errors timeval) Sg_SocketSelectX)

(define-c-proc socket-peer (o::<socket>) :no-side-effect Sg_SocketPeer)
(define-c-proc socket-name (o::<socket>) :no-side-effect Sg_SocketName)
(define-c-proc socket-info (o::<socket>) :no-side-effect Sg_SocketInfo)
(define-c-proc socket-info? (o) ::<boolean> SG_SOCKET_INFO_P)

(define-c-proc ip-address->string (ip::<ip-address>) :no-side-effect
  Sg_IpAddressToString)
;; constant?
(define-c-proc ip-address->bytevector (ip::<ip-address>) :no-side-effect
  (result (-> ip ip)))
(define-c-proc ip-address? (o) ::<boolean> SG_IP_ADDRESS_P)
