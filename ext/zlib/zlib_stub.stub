;; -*- mode: scheme; coding: utf-8; -*-
(decl-code
 (.include <sagittarius.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   <sagittarius-zlib.h>))

(define-type <z-stream> "SgZStream*" "z-stream" "SG_ZSTREAM_P" "SG_ZSTREAM")

(define-c-proc deflate-init
  (level::<fixnum> windowbits::<fixnum> memlevel::<fixnum> strategy::<fixnum>)
  (result (Sg_DeflateInit (cast int level)
			  (cast int windowbits)
			  (cast int memlevel)
			  (cast int strategy))))

(define-c-proc deflate-reset (strm::<z-stream>) ::<fixnum> Sg_DeflateReset)

(define-c-proc deflate-set-dictionary (strm::<z-stream> dict::<bytevector>)
  ::<fixnum>
  Sg_DeflateSetDictionary)

(define-c-proc deflate
  (strm::<z-stream> data::<bytevector> dest::<bytevector> flush::<fixnum>)
  ::<fixnum>
  (result (Sg_Deflate strm data dest (cast int flush))))

(define-c-proc deflate-end (strm::<z-stream>) ::<fixnum> Sg_DeflateEnd)

(define-c-proc inflate-init (windowbits::<fixnum>)
  (result (Sg_InflateInit (cast int windowbits))))

(define-c-proc inflate-reset
  (strm::<z-stream> :optional (bits::<fixnum> -1)) ::<fixnum>
  (result (Sg_InflateReset strm (cast int bits))))

(define-c-proc inflate-set-dictionary (strm::<z-stream> dict::<bytevector>)
  ::<fixnum>
  Sg_InflateSetDictionary)

(define-c-proc inflate-sync (strm::<z-stream>) ::<fixnum>
  Sg_InflateSync)

(define-c-proc inflate
  (strm::<z-stream> data::<bytevector> dest::<bytevector> size::<fixnum> flush::<fixnum>)
  ::<fixnum>
  (result (Sg_Inflate strm data dest size (cast int flush))))

(define-c-proc inflate-end (strm::<z-stream> flush::<fixnum>) ::<fixnum>
  (result (Sg_InflateEnd strm (cast int flush))))

;; accessor
(define-c-proc zstream? (obj) ::<boolean> :constant SG_ZSTREAM_P)

(define-c-proc zstream-total-in (strm::<z-stream>) ::<fixnum> :no-side-effect
  (result (-> (-> strm strm) total_in)))
(define-c-proc zstream-total-out (strm::<z-stream>) ::<fixnum> :no-side-effect
  (result (-> (-> strm strm) total_out)))
(define-c-proc zstream-avail-in (strm::<z-stream>) ::<fixnum> :no-side-effect
  (result (-> (-> strm strm) avail_in)))
(define-c-proc zstream-avail-out (strm::<z-stream>) ::<fixnum> :no-side-effect
  (result (-> (-> strm strm) avail_out)))
(define-c-proc zstream-data-type (strm::<z-stream>) ::<fixnum> :no-side-effect
  (result (-> (-> strm strm) data_type)))
(define-c-proc zstream-adler32 (strm::<z-stream>) ::<fixnum> :no-side-effect
  (result (-> (-> strm strm) adler)))

(define-c-proc zstream-read-count (strm::<z-stream> in::<bytevector>)
  (result (Sg_MakeIntegerFromS64
	   (- (-> (-> strm strm) next_in) (SG_BVECTOR_ELEMENTS in)))))

(define-c-proc zstream-write-count (strm::<z-stream> out::<bytevector>)
  (result (Sg_MakeIntegerFromS64
	   (- (-> (-> strm strm) next_out) (SG_BVECTOR_ELEMENTS out)))))

;; misc
(define-c-proc zlib-error-message (strm::<z-stream>) :no-side-effect
  (if (-> (-> strm strm) msg)
      (result (Sg_MakeStringC (-> (-> strm strm) msg)))
      (result (SG_MAKE_STRING "no z-stream error message available"))))

(define-c-proc zlib-version () :no-side-effect Sg_ZlibVersion)

;; utilities
(define-c-proc crc32 (data::<bytevector> :optional (crc::<integer> 0))
  :constant
  (result (Sg_MakeIntegerU (crc32 (Sg_GetUInteger crc)
				  (SG_BVECTOR_ELEMENTS data)
				  (cast int (SG_BVECTOR_SIZE data))))))

(define-c-proc adler32 (data::<bytevector> :optional (crc::<integer> 1))
  :constant
  (result (Sg_MakeIntegerU (adler32 (Sg_GetUInteger crc)
				    (SG_BVECTOR_ELEMENTS data)
				    (cast int (SG_BVECTOR_SIZE data))))))
